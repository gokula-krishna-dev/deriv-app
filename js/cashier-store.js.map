{"version":3,"sources":["webpack://@deriv/cashier/webpack/universalModuleDefinition","webpack://@deriv/cashier/webpack/bootstrap","webpack://@deriv/cashier//home/circleci/project/node_modules/prop-types/factoryWithThrowingShims.js","webpack://@deriv/cashier//home/circleci/project/node_modules/prop-types/index.js","webpack://@deriv/cashier//home/circleci/project/node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://@deriv/cashier/./Config/on-ramp-providers.js","webpack://@deriv/cashier/./Utils/Validator/errors.js","webpack://@deriv/cashier/./Utils/Validator/validator.js","webpack://@deriv/cashier/./Stores/base-store.js","webpack://@deriv/cashier/./Stores/Cashier/on-ramp-store.js","webpack://@deriv/cashier/./Containers/cashier-notifications.jsx","webpack://@deriv/cashier/./Stores/Cashier/cashier-store.js","webpack://@deriv/cashier/./_common/utility.js","webpack://@deriv/cashier/external \"@deriv/components\"","webpack://@deriv/cashier/external \"@deriv/shared\"","webpack://@deriv/cashier/external \"@deriv/translations\"","webpack://@deriv/cashier/external \"mobx\"","webpack://@deriv/cashier/external \"react\""],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__deriv_components__","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_mobx__","__WEBPACK_EXTERNAL_MODULE_react__","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","installedModules","__webpack_require__","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","oldJsonpFunction","slice","s","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","getShim","isRequired","ReactPropTypes","array","bool","func","number","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","store","icon","dark","light","getDescription","localize","getAllowedResidencies","getPaymentIcons","getScriptDependencies","getDefaultFromCurrency","getFromCurrencies","getToCurrencies","getWidgetHtml","WS","serviceToken","service_token","service","referrer","href","then","response","url","banxa","open","onMountWidgetContainer","should_show_deposit_address","URL","searchParams","append","currency","root_store","client","toLowerCase","includes","to_currency","wyre","deposit_address","Errors","this","errors","attribute","has","indexOf","Validator","input","rules","error_count","rule","is_rule_string","rule_object","options","validator","getPreBuildDVRs","error_message","template","min","max","name1","name2","add","keys","forEach","ruleObject","getRuleObject","condition","is_valid","is_ok","addFailure","check","BaseStore","action","bound","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","local_storage_properties","session_storage_properties","validation_rules","store_name","writable","has_local_or_session_storage","setValidationRules","setupReactionForLocalStorage","setupReactionForSessionStorage","retrieveFromStorage","properties","snapshot","toJS","isEmptyObject","reduce","result","assign","reaction","map","saveToStorage","STORAGES","LOCAL_STORAGE","SESSION_STORAGE","storage","JSON","stringify","getSnapshot","localStorage","setItem","sessionStorage","local_storage_snapshot","parse","getItem","session_storage_snapshot","k","propertyName","messages","validation_errors","filter","x","concat","addRule","intercept","change","validateProperty","newValue","trigger","inputs","isPassed","setValidationErrorMessages","listener","when","switch_broadcast","switchEndSignal","onSwitchAccount","isProduction","pre_switch_broadcast","setPreSwitchAccount","onPreSwitchAccount","has_logged_out","setLogout","onLogout","initialized_broadcast","setInitialized","onClientInit","common","is_network_online","is_online","ui","is_dark_mode_on","has_real_account_signup_ended","setRealAccountSignupEnd","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","loginid","reactions","act","partial_fetch_time","freeze","observable","OnRampStore","shallow","ref","deposit_address_ref","setOnrampProviders","OnrampProviders","disposeThirdPartyJsReaction","selected_provider","provider","dependencies","loadjs","script_name","getKebabCase","isDefined","warn","setSelectedProvider","disposeGetWidgetHtmlReaction","should_show_widget","is_requesting_widget_html","setIsRequestingWidgetHtml","widget_html","setWidgetHtml","setShouldShowWidget","setWidgetError","range","createRange","selectNodeContents","selections","getSelection","removeAllRanges","addRange","navigator","clipboard","writeText","setIsDepositAddressPopoverOpen","pollApiForDepositAddress","websiteUrl","routes","cashier_deposit","substring","should_allow_empty_address","setIsDepositAddressLoading","setApiError","deposit_address_interval","setInterval","getDepositAddressFromApi","cashier","authorized","should_clear_interval","address","deposit","setDepositAddress","clearInterval","setDepositAddressRef","api_error","copy_icon_ref","is_loading","is_deposit_address_loading","is_open","is_deposit_address_popover_open","is_onramp_modal_open","setIsOnRampModalOpen","should_show","onramp_providers","widget_error","is_virtual","isCryptocurrency","filtered_onramp_providers","to_currencies","allowed_residencies","residence","should_show_dialog","computed","CashierNotifications","p2p_notification_count","Fragment","className","count","propTypes","hasTransferNotAllowedLoginid","startsWith","getSelectedError","selected_value","is_from_account","i18n_default_text","values","Config","container","is_session_timeout","onIframeLoaded","timeout_session","ConfigError","ConfigPaymentAgent","list","ConfigVerification","ConfigPaymentAgentTransfer","ConfigAccountTransfer","balance","accounts_list","find","acc","selected_from","selected_to","is_button_clicked","timeout_button","CashierStore","active_container","config","onRemount","is_populating_values","containers","withdraw","map_action","payment_agent","requestTransferBetweenAccounts","amount","is_logged_in","setLoading","setErrorMessage","account_transfer","transferBetweenAccounts","transfer_between_accounts","code","getAccountStatus","account_status_response","setAccountStatus","get_account_status","setReceiptTransfer","formatMoney","accounts","account","setBalanceByLoginId","setBalanceSelectedFrom","setBalanceSelectedTo","account_type","mt5LoginList","responseMt5LoginList","balanceAll","setBalanceOtherAccounts","setAccountTransferAmount","setIsTransferConfirm","setIsTransferSuccessful","menu","attach","id","text","link_to","login_only","onramp","init","accountSwitcherListener","checkP2pStatus","switched","wait","p2pAdvertiserInfo","advertiser_info","advertiser_error","getPropertyValue","is_p2p_restricted","setIsP2pVisible","should_remount","onMountCommon","setPaymentAgentList","filterPaymentAgentList","payment_agent_transfer","is_payment_agent","checkIsPaymentAgent","sortAccountsTransfer","is_onramp_tab_visible","pathname","endsWith","cashier_onramp","routeTo","index","cashier_route_tab_index","notification_count","is_p2p_visible","cashier_p2p","verification_code","current_container","onMount","is_switching","setContainerHeight","checkIframeLoaded","setIframeUrl","response_cashier","handleCashierError","setSessionTimeout","clearTimeoutCashierUrl","clearVerification","setTimeoutCashierUrl","removeOnIframeLoaded","test","origin","addEventListener","removeEventListener","iframe_url","setVerificationCode","height","iframe_height","onClickButton","is_show_full_page","is_verification_error","error_object","fields","details","verification","is_ask_uk_funds_protection","is_self_exclusion_max_turnover_set","is_ask_authentication","is_ask_financial_risk_approval","config_name","send","ukgc_funds_protection","tnc_approval","setErrorConfig","is_session_time_out","is_email_sent","is_resend_clicked","resend_timeout","clearTimeoutVerification","email","setVerificationButtonClicked","withdrawal_type","verifyEmail","response_verify_email","setVerificationEmailSent","setTimeoutVerification","setCountDownResendVerification","sendVerificationEmail","setVerificationResendTimeout","resend_interval","setVerificationResendClicked","onMountPaymentAgentList","paymentAgentList","bank","supported_banks","supported_bank","replace","sort","a","b","pa_list","getPaymentAgentList","payment_agent_list","paymentagent_list","phone","telephone","split","addSupportedBank","sortSupportedBanks","filtered_list","is_payment_agent_visible","cashier_pa","parseInt","selected_bank","onMountPaymentAgentWithdraw","setIsWithdraw","setIsWithdrawSuccessful","setReceipt","agents","addPaymentAgent","is_withdraw","is_try_withdraw_successful","is_withdraw_successful","payment_agent_name","confirm","amount_transferred","payment_agent_email","payment_agent_id","payment_agent_phone","payment_agent_url","receipt","paymentagent_loginid","max_withdrawal","min_withdrawal","paymentAgentWithdraw","dry_run","payment_agent_withdraw","paymentagent_withdraw","selected_agent","agent","setConfirmation","setIsTryWithdrawSuccessful","resetPaymentAgent","onMountAccountTransfer","has_no_accounts_balance","active_accounts","setHasNoAccountsBalance","canDoAccountTransfer","setTransferFee","setMinimumFee","setTransferLimit","can_transfer","setHasNoAccount","has_no_account","transfer_fee","getCurrencies","decimals","getDecimalPlaces","minimum_fee","Math","pow","toFixed","is_mt_transfer","is_mt","transfer_limit","decimal_places","response_accounts","mt5_login_list","login","a_is_mt","b_is_mt","a_is_crypto","b_is_crypto","a_is_fiat","b_is_fiat","market_type","sub_account_type","arr_accounts","setSelectedTo","obj_values","getMT5AccountDisplay","getCurrencyDisplayCode","toUpperCase","is_crypto","mt_icon","getMT5Account","setSelectedFrom","setAccounts","is_try_transfer_successful","is_transfer_confirm","account_transfer_amount","is_transfer_successful","onChangeTransferTo","first_non_mt","first_fiat","onMountPaymentAgentTransfer","current_payment_agent","getCurrentPaymentAgent","setMinMaxPaymentAgentTransfer","response_payment_agent","getSettings","get_settings","setIsPaymentAgent","is_authenticated_payment_agent","cashier_pa_transfer","client_id","client_name","description","is_eu","account_status","status","some","status_name","is_authentication_needed","is_tnc_needed","is_financial_account","is_financial_information_incomplete","is_trading_experience_incomplete","need_authentication","need_financial_assessment","need_tnc","item","need_poi","authentication","needs_verification","is_withdrawal_lock","transfer_to","paymentAgentTransfer","paymentagent_transfer","setConfirmationPaymentAgentTransfer","client_to_full_name","setIsTryTransferSuccessful","resetPaymentAgentTransfer","setReceiptPaymentAgentTransfer","static_hash","eu_countries","content","to_replace","Array","isArray","tag_name","attributes","el","attr","textContent","html","getStaticHash","querySelector","getAttribute","PromiseClass","isEuCountry","country","copyToClipboard","textField","innerText","body","select","execCommand","remove"],"mappings":"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","file":"js/cashier-store.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/components\"), require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"mobx\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/components\", \"@deriv/shared\", \"@deriv/translations\", \"mobx\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/cashier\"] = factory(require(\"@deriv/components\"), require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"mobx\"), require(\"react\"));\n\telse\n\t\troot[\"@deriv/cashier\"] = factory(root[\"@deriv/components\"], root[\"@deriv/shared\"], root[\"@deriv/translations\"], root[\"mobx\"], root[\"react\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__, __WEBPACK_EXTERNAL_MODULE_react__) {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t};\n\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"cashier-store\": 0\n \t};\n\n\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/cashier.\" + ({\"loadjs\":\"loadjs\"}[chunkId]||chunkId) + \".\" + {\"loadjs\":\"4c99863f8c04ba7575ae\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp_deriv_cashier\"] = window[\"webpackJsonp_deriv_cashier\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./Stores/Cashier/cashier-store.js\");\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","import { localize } from '@deriv/translations';\n\nconst createBanxaProvider = store => ({\n    icon: { dark: 'IcCashierBanxaDark', light: 'IcCashierBanxaLight' },\n    name: 'Banxa',\n    getDescription: () =>\n        localize(\n            'A fast and secure fiat-to-crypto payment service. Deposit cryptocurrencies from anywhere in the world using your credit/debit cards and bank transfers.'\n        ),\n    getAllowedResidencies: () => ['*'],\n    getPaymentIcons: () => [\n        { dark: 'IcCashierVisaDark', light: 'IcCashierVisaLight' },\n        { dark: 'IcCashierMastercardDark', light: 'IcCashierMastercardLight' },\n        { dark: 'IcCashierBpayDark', light: 'IcCashierBpayLight' },\n        { dark: 'IcCashierSepaDark', light: 'IcCashierSepaLight' },\n        { dark: 'IcCashierBlueshyftDark', light: 'IcCashierBlueshyftLight' },\n        { dark: 'IcCashierFlexepinDark', light: 'IcCashierFlexepinLight' },\n        { dark: 'IcCashierPayIdDark', light: 'IcCashierPayIdLight' },\n        { dark: 'IcCashierPoliDark', light: 'IcCashierPoliLight' },\n        { dark: 'IcCashierApplePay', light: 'IcCashierApplePay' },\n        { dark: 'IcCashierInteracEtransfer', light: 'IcCashierInteracEtransfer' },\n        { dark: 'IcCashierIdeal', light: 'IcCashierIdeal' },\n        { dark: 'IcCashierPostBillPayDark', light: 'IcCashierPostBillPayLight' },\n        { dark: 'IcCashierSofort', light: 'IcCashierSofort' },\n    ],\n    getScriptDependencies: () => [], // None.\n    getDefaultFromCurrency: () => '',\n    getFromCurrencies: () => ['*'],\n    getToCurrencies: () => ['*'],\n    getWidgetHtml: () => {\n        return new Promise((resolve, reject) => {\n            store.WS.serviceToken({\n                service_token: 1,\n                service: 'banxa',\n                referrer: window.location.href,\n            }).then(response => {\n                if (response.error) {\n                    reject(response.error.message);\n                } else {\n                    const { url } = response.service_token.banxa;\n\n                    if (url) {\n                        window.open(url);\n                    }\n\n                    // Resolving empty will/should redirect user.\n                    resolve();\n                }\n            });\n        });\n    },\n    onMountWidgetContainer: () => {},\n    should_show_deposit_address: false,\n});\n\nconst createChangellyProvider = store => ({\n    icon: { dark: 'IcCashierChangellyDark', light: 'IcCashierChangellyLight' },\n    name: 'Changelly',\n    getDescription: () =>\n        localize(\n            'Your simple access to crypto. Fast and secure way to exchange and purchase cryptocurrencies. 24/7 live chat support.'\n        ),\n    getAllowedResidencies: () => ['*'],\n    getPaymentIcons: () => [\n        { dark: 'IcCashierVisaDark', light: 'IcCashierVisaLight' },\n        { dark: 'IcCashierMastercardDark', light: 'IcCashierMastercardLight' },\n    ],\n    getScriptDependencies: () => [],\n    getDefaultFromCurrency: () => 'usd',\n    getFromCurrencies: () => ['usd', 'eur', 'gbp'],\n    getToCurrencies: () => ['bch', 'btc', 'etc', 'eth', 'ltc', 'ust'],\n    getWidgetHtml() {\n        return new Promise(resolve => {\n            const url = new URL('https://widget.changelly.com/?v=3&theme=default');\n            url.searchParams.append('fromDefault', this.getDefaultFromCurrency());\n            const currency = store.root_store.client.currency.toLowerCase();\n            if (this.getToCurrencies().includes(currency)) {\n                const to_currency = currency === 'ust' ? 'usdt' : currency;\n                url.searchParams.append('to', to_currency);\n                url.searchParams.append('toDefault', to_currency);\n            }\n\n            url.searchParams.append('amount', 1);\n            url.searchParams.append('merchant_id', 'iiq3jdt2p44yrfbx');\n            window.open(url);\n            resolve();\n        });\n    },\n    onMountWidgetContainer: () => {},\n    should_show_deposit_address: true,\n});\n\nconst createWyreProvider = store => ({\n    icon: { dark: 'IcCashierWyreDark', light: 'IcCashierWyreLight' },\n    name: 'Wyre',\n    getDescription: () =>\n        localize(\n            'A secure and compliant bridge between fiat currencies and cryptocurrencies. Supports BTC, ETH, WETH, and DAI. Exchange crypto safely and securely with Wyre.'\n        ),\n    getAllowedResidencies: () => [\n        // https://docs.sendwyre.com/docs/getting-started-wyre-checkout#supported-states-and-countries\n        'ar',\n        'at',\n        'au',\n        'be',\n        'bo',\n        'br',\n        'by',\n        'ca',\n        'ch',\n        'cl',\n        'co',\n        'cr',\n        'cy',\n        'cz',\n        'de',\n        'dk',\n        'do',\n        'dz',\n        'ee',\n        'es',\n        'fi',\n        'fr',\n        'fr',\n        'gb',\n        'gr',\n        'hk',\n        'id',\n        'ie',\n        'il',\n        'in',\n        'is',\n        'it',\n        'jp',\n        'kr',\n        'lt',\n        'lu',\n        'lv',\n        'mx',\n        'my',\n        'nl',\n        'no',\n        'np',\n        'nz',\n        'pe',\n        'ph',\n        'pl',\n        'pt',\n        'py',\n        'se',\n        'sg',\n        'si',\n        'sk',\n        'th',\n        'tr',\n        'tz',\n        'vn',\n        'za',\n    ],\n    getPaymentIcons: () => [\n        { dark: 'IcCashierVisaDark', light: 'IcCashierVisaLight' },\n        { dark: 'IcCashierMastercardDark', light: 'IcCashierMastercardLight' },\n    ],\n    getScriptDependencies: () => [],\n    getDefaultFromCurrency: () => 'usd',\n    getFromCurrencies: () => ['eur', 'aud', 'usd', 'brl', 'cad', 'gbp', 'mxn'],\n    getToCurrencies: () => ['btc', 'eth', 'husd', 'weth', 'usdt', 'usdc', 'busd', 'dai', 'gusd', 'pax'],\n    getWidgetHtml: () => {\n        return new Promise((resolve, reject) => {\n            store.WS.serviceToken({ service_token: 1, service: 'wyre' }).then(response => {\n                if (response.error) {\n                    reject(response.error.message);\n                } else {\n                    const { url } = response.service_token.wyre;\n\n                    if (url) {\n                        window.open(url);\n                    }\n\n                    // Resolving empty will/should redirect user.\n                    resolve();\n                }\n            });\n        });\n    },\n    onMountWidgetContainer: () => {},\n    should_show_deposit_address: false,\n});\n\nconst createXanPoolProvider = store => ({\n    icon: { dark: 'IcCashierXanpoolDark', light: 'IcCashierXanpoolLight' },\n    name: 'XanPool',\n    getDescription: () =>\n        localize(\n            'Buy cryptocurrencies in an instant. Enjoy easy, quick, and secure exchanges using your local payment methods.'\n        ),\n    getAllowedResidencies: () => ['*'],\n    getPaymentIcons: () => [\n        { dark: 'IcCashierFpsDark', light: 'IcCashierFpsLight' },\n        { dark: 'IcCashierAliPayDark', light: 'IcCashierAliPayLight' },\n        { dark: 'IcCashierGoPayDark', light: 'IcCashierGoPayLight' },\n        { dark: 'IcCashierMandiriPay', light: 'IcCashierMandiriPay' },\n        { dark: 'IcCashierInstaPayLight', light: 'IcCashierInstaPayDark' },\n        { dark: 'IcCashierCebuanaLhuillierDark', light: 'IcCashierCebuanaLhuillierLight' },\n        { dark: 'IcCashierPayNowDark', light: 'IcCashierPayNowLight' },\n        { dark: 'IcCashierUpiDark', light: 'IcCashierUpiLight' },\n        { dark: 'IcCashierPromptPayDark', light: 'IcCashierPromptPayLight' },\n        { dark: 'IcCashierViettlePay', light: 'IcCashierViettlePay' },\n    ],\n    getScriptDependencies: () => [],\n    getToCurrencies: () => ['btc', 'eth', 'ust', 'zil', 'nem'],\n    getWidgetHtml() {\n        return new Promise(resolve => {\n            const { currency } = store.root_store.client;\n\n            let url = 'https://checkout.xanpool.com/';\n\n            url += `?apiKey=db4ec638dff9a68abda1ef6b7638c220`;\n            url += `&redirectUrl=${window.location.href}`;\n            url += `&wallet=${store.deposit_address}`;\n            url += `&cryptoCurrency=${currency === 'UST' ? 'USDT' : currency}`;\n            url += `&transactionType=buy`;\n\n            window.open(url);\n            resolve();\n        });\n    },\n    onMountWidgetContainer: () => {},\n    should_show_deposit_address: false,\n});\n\nexport default {\n    createBanxaProvider,\n    createChangellyProvider,\n    createWyreProvider,\n    createXanPoolProvider,\n};\n","class Errors {\n    constructor() {\n        this.errors = {};\n    }\n\n    add(attribute, message) {\n        if (!this.has(attribute)) {\n            this.errors[attribute] = [];\n        }\n\n        if (this.errors[attribute].indexOf(message) === -1) {\n            this.errors[attribute].push(message);\n        }\n    }\n\n    all() {\n        return this.errors;\n    }\n\n    first(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute][0];\n        }\n        return null;\n    }\n\n    get(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute];\n        }\n\n        return [];\n    }\n\n    has(attribute) {\n        return Object.prototype.hasOwnProperty.call(this.errors, attribute);\n    }\n}\n\nexport default Errors;\n","import { getPreBuildDVRs } from '@deriv/shared';\nimport { template } from '_common/utility';\nimport Error from './errors';\n\nclass Validator {\n    constructor(input, rules, store = null) {\n        this.input = input;\n        this.rules = rules;\n        this.store = store;\n        this.errors = new Error();\n\n        this.error_count = 0;\n    }\n\n    /**\n     * Add failure and error message for given rule\n     *\n     * @param {string} attribute\n     * @param {object} rule\n     */\n    addFailure(attribute, rule, error_message) {\n        let message = error_message || rule.options.message || getPreBuildDVRs()[rule.name].message();\n        if (rule.name === 'length') {\n            message = template(message, [\n                rule.options.min === rule.options.max ? rule.options.min : `${rule.options.min}-${rule.options.max}`,\n            ]);\n        } else if (rule.name === 'min') {\n            message = template(message, [rule.options.min]);\n        } else if (rule.name === 'not_equal') {\n            message = template(message, [rule.options.name1, rule.options.name2]);\n        }\n        this.errors.add(attribute, message);\n        this.error_count++;\n    }\n\n    /**\n     * Runs validator\n     *\n     * @return {boolean} Whether it passes; true = passes, false = fails\n     */\n    check() {\n        Object.keys(this.input).forEach(attribute => {\n            if (!Object.prototype.hasOwnProperty.call(this.rules, attribute)) {\n                return;\n            }\n\n            this.rules[attribute].forEach(rule => {\n                const ruleObject = Validator.getRuleObject(rule);\n\n                if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\n                    return;\n                }\n\n                if (ruleObject.options.condition && !ruleObject.options.condition(this.store)) {\n                    return;\n                }\n\n                if (this.input[attribute] === '' && ruleObject.name !== 'req') {\n                    return;\n                }\n\n                let is_valid, error_message;\n                if (ruleObject.name === 'number') {\n                    const { is_ok, message } = ruleObject.validator(\n                        this.input[attribute],\n                        ruleObject.options,\n                        this.store,\n                        this.input\n                    );\n                    is_valid = is_ok;\n                    error_message = message;\n                } else {\n                    is_valid = ruleObject.validator(this.input[attribute], ruleObject.options, this.store, this.input);\n                }\n\n                if (!is_valid) {\n                    this.addFailure(attribute, ruleObject, error_message);\n                }\n            });\n        });\n        return !this.error_count;\n    }\n\n    /**\n     * Determine if validation passes\n     *\n     * @return {boolean}\n     */\n    isPassed() {\n        return this.check();\n    }\n\n    /**\n     * Converts the rule array to an object\n     *\n     * @param {array} rule\n     * @return {object}\n     */\n    static getRuleObject(rule) {\n        const is_rule_string = typeof rule === 'string';\n        const rule_object = {\n            name: is_rule_string ? rule : rule[0],\n            options: is_rule_string ? {} : rule[1] || {},\n        };\n\n        rule_object.validator = rule_object.name === 'custom' ? rule[1].func : getPreBuildDVRs()[rule_object.name].func;\n\n        return rule_object;\n    }\n}\n\nexport default Validator;\n","import { action, intercept, observable, reaction, toJS, when } from 'mobx';\nimport { isProduction, isEmptyObject } from '@deriv/shared';\n\nimport Validator from 'Utils/Validator';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    @observable\n    validation_errors = {};\n\n    @observable\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    @observable partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        const {\n            root_store,\n            local_storage_properties,\n            session_storage_properties,\n            validation_rules,\n            store_name,\n        } = options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n        this.setValidationRules(validation_rules);\n\n        this.setupReactionForLocalStorage();\n        this.setupReactionForSessionStorage();\n        this.retrieveFromStorage();\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    @action\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    @action\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    @action\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    @action\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    @action\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    @action\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    @action.bound\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    @action.bound\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    @action.bound\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    @action.bound\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    @action.bound\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    @action.bound\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    @action.bound\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    @action.bound\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    @action.bound\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    @action.bound\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    @action.bound\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    @action.bound\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    @action.bound\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    @action.bound\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    @action.bound\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    @action.bound\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import { action, computed, observable, reaction } from 'mobx';\nimport { localize } from '@deriv/translations';\nimport { getKebabCase, isCryptocurrency, routes, websiteUrl } from '@deriv/shared';\nimport OnrampProviders from 'Config/on-ramp-providers';\nimport BaseStore from '../base-store';\n\nexport default class OnRampStore extends BaseStore {\n    @observable api_error = null;\n    @observable deposit_address = null;\n    @observable is_deposit_address_loading = true;\n    @observable is_deposit_address_popover_open = false;\n    @observable is_onramp_modal_open = false;\n    @observable is_requesting_widget_html = false;\n    @observable.shallow onramp_providers = [];\n    @observable.ref selected_provider = null;\n    @observable should_show_widget = false;\n    @observable widget_error = null;\n    @observable widget_html = null;\n\n    deposit_address_ref = null;\n\n    constructor({ WS, root_store }) {\n        super({ root_store });\n        this.WS = WS;\n\n        this.onClientInit(async () => {\n            this.setOnrampProviders([\n                OnrampProviders.createChangellyProvider(this),\n                OnrampProviders.createWyreProvider(this),\n                OnrampProviders.createXanPoolProvider(this),\n                OnrampProviders.createBanxaProvider(this),\n            ]);\n        });\n    }\n\n    @computed\n    get is_onramp_tab_visible() {\n        const { client } = this.root_store;\n\n        return (\n            client.is_virtual === false &&\n            isCryptocurrency(client.currency) &&\n            this.filtered_onramp_providers.length > 0\n        );\n    }\n\n    @computed\n    get filtered_onramp_providers() {\n        const { client } = this.root_store;\n\n        return (\n            this.onramp_providers\n                // Ensure provider supports this user's account currency.\n                .filter(provider => {\n                    const to_currencies = provider.getToCurrencies();\n                    return to_currencies.includes('*') || to_currencies.includes(client.currency.toLowerCase());\n                })\n                // Ensure provider supports this user's residency.\n                .filter(provider => {\n                    const allowed_residencies = provider.getAllowedResidencies();\n                    return allowed_residencies.includes('*') || allowed_residencies.includes(client.residence);\n                })\n        );\n    }\n\n    @computed\n    get onramp_popup_modal_title() {\n        if (this.should_show_widget) {\n            return localize('Payment channel');\n        } else if (this.selected_provider) {\n            if (this.should_show_dialog) {\n                return this.api_error\n                    ? localize('Our server cannot retrieve an address.')\n                    : localize(\"You don't have a crypto address yet.\");\n            }\n            return ' '; // Empty string to render header + close icon.\n        }\n        return undefined;\n    }\n\n    @computed\n    get should_show_dialog() {\n        return this.api_error || !this.deposit_address;\n    }\n\n    @action.bound\n    onMountOnramp() {\n        this.disposeThirdPartyJsReaction = reaction(\n            () => this.selected_provider,\n            async provider => {\n                if (!provider) {\n                    return;\n                }\n\n                const dependencies = provider.getScriptDependencies();\n                if (dependencies.length === 0) {\n                    return;\n                }\n\n                const { default: loadjs } = await import(/* webpackChunkName: \"loadjs\" */ 'loadjs');\n                const script_name = `${getKebabCase(provider.name)}-onramp`;\n\n                if (!loadjs.isDefined(script_name)) {\n                    loadjs(dependencies, script_name, {\n                        error: () => {\n                            // eslint-disable-next-line no-console\n                            console.warn(`Dependencies for onramp provider ${provider.name} could not be loaded.`);\n                            this.setSelectedProvider(null);\n                        },\n                    });\n                }\n            }\n        );\n\n        // When \"should_show_widget\", attempt to fetch \"selected_provider\"'s \"widget_html\".\n        this.disposeGetWidgetHtmlReaction = reaction(\n            () => this.should_show_widget,\n            should_show_widget => {\n                if (should_show_widget) {\n                    if (this.is_requesting_widget_html) {\n                        return;\n                    }\n\n                    this.setIsRequestingWidgetHtml(true);\n                    this.selected_provider\n                        .getWidgetHtml()\n                        .then(widget_html => {\n                            if (widget_html) {\n                                // Regular providers (iframe/JS embed)\n                                this.setWidgetHtml(widget_html);\n                            } else {\n                                // An empty resolve (widget_html) identifies a redirect.\n                                this.setShouldShowWidget(false);\n                            }\n                        })\n                        .catch(error => {\n                            this.setWidgetError(error);\n                        })\n                        .finally(() => this.setIsRequestingWidgetHtml(false));\n                }\n            }\n        );\n    }\n\n    @action.bound\n    onUnmountOnramp() {\n        if (typeof this.disposeThirdPartyJsReaction === 'function') {\n            this.disposeThirdPartyJsReaction();\n        }\n        if (typeof this.disposeGetWidgetHtmlReaction === 'function') {\n            this.disposeGetWidgetHtmlReaction();\n        }\n    }\n\n    @action.bound\n    onClickCopyDepositAddress() {\n        const range = document.createRange();\n        range.selectNodeContents(this.deposit_address_ref);\n\n        const selections = window.getSelection();\n        selections.removeAllRanges();\n        selections.addRange(range);\n\n        navigator.clipboard.writeText(this.deposit_address).then(() => {\n            this.setIsDepositAddressPopoverOpen(true);\n            setTimeout(() => this.setIsDepositAddressPopoverOpen(false), 500);\n        });\n    }\n\n    @action.bound\n    onClickDisclaimerContinue() {\n        this.setShouldShowWidget(true);\n    }\n\n    @action.bound\n    onClickGoToDepositPage() {\n        this.pollApiForDepositAddress(false);\n        window.open(websiteUrl() + routes.cashier_deposit.substring(1));\n    }\n\n    @action.bound\n    pollApiForDepositAddress(should_allow_empty_address) {\n        // should_allow_empty_address: API returns empty deposit address for legacy accounts\n        // that have never generated a deposit address. Setting this to \"true\" will allow\n        // the user to be redirected to the Deposit page (where an address will be generated).\n        // Setting this to \"false\" will start polling the API for this deposit address.\n\n        this.setIsDepositAddressLoading(true);\n        this.setApiError(null);\n\n        const deposit_address_interval = setInterval(() => getDepositAddressFromApi, 3000);\n        const getDepositAddressFromApi = () => {\n            this.root_store.modules.cashier.WS.authorized\n                .cashier('deposit', { provider: 'crypto', type: 'api' })\n                .then(response => {\n                    let should_clear_interval = false;\n\n                    if (response.error) {\n                        this.setApiError(response.error);\n                        should_clear_interval = true;\n                    } else {\n                        const { address } = response.cashier.deposit;\n\n                        if (address || should_allow_empty_address) {\n                            this.setDepositAddress(address);\n                            should_clear_interval = true;\n                        }\n                    }\n\n                    if (should_clear_interval) {\n                        clearInterval(deposit_address_interval);\n                        this.setIsDepositAddressLoading(false);\n                    }\n                });\n        };\n\n        getDepositAddressFromApi();\n        setTimeout(() => {\n            clearInterval(deposit_address_interval);\n            this.setIsDepositAddressLoading(false);\n        }, 30000);\n    }\n\n    @action.bound\n    resetPopup() {\n        this.setApiError(null);\n        this.setDepositAddress(null);\n        this.setDepositAddressRef(null);\n        this.setIsDepositAddressLoading(true);\n        this.setSelectedProvider(null);\n        this.setShouldShowWidget(false);\n        this.setWidgetError(null);\n        this.setWidgetHtml(null);\n    }\n\n    @action.bound\n    setApiError(api_error) {\n        this.api_error = api_error;\n    }\n\n    @action.bound\n    setCopyIconRef(ref) {\n        this.copy_icon_ref = ref;\n    }\n\n    @action.bound\n    setDepositAddress(deposit_address) {\n        this.deposit_address = deposit_address;\n    }\n\n    @action.bound\n    setDepositAddressRef(ref) {\n        this.deposit_address_ref = ref;\n    }\n\n    @action.bound\n    setIsDepositAddressLoading(is_loading) {\n        this.is_deposit_address_loading = is_loading;\n    }\n\n    @action.bound\n    setIsDepositAddressPopoverOpen(is_open) {\n        this.is_deposit_address_popover_open = is_open;\n    }\n\n    @action.bound\n    setIsOnRampModalOpen(is_open) {\n        this.is_onramp_modal_open = is_open;\n    }\n\n    @action.bound\n    setIsRequestingWidgetHtml(is_requesting_widget_html) {\n        this.is_requesting_widget_html = is_requesting_widget_html;\n    }\n\n    @action.bound\n    setSelectedProvider(provider) {\n        if (provider) {\n            this.selected_provider = provider;\n            this.setIsOnRampModalOpen(true);\n            this.pollApiForDepositAddress(true);\n        } else {\n            this.setIsOnRampModalOpen(false);\n            this.selected_provider = null;\n        }\n    }\n\n    @action.bound\n    setShouldShowWidget(should_show) {\n        this.should_show_widget = should_show;\n    }\n\n    @action.bound\n    setOnrampProviders(onramp_providers) {\n        this.onramp_providers = onramp_providers.slice();\n    }\n\n    @action.bound\n    setWidgetError(widget_error) {\n        this.widget_error = widget_error;\n    }\n\n    @action.bound\n    setWidgetHtml(widget_html) {\n        this.widget_html = widget_html;\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Counter } from '@deriv/components';\n\nconst CashierNotifications = ({ p2p_notification_count }) => (\n    <React.Fragment>\n        <Icon icon='IcCashier' className='header__icon' />\n        {!!p2p_notification_count && <Counter className='cashier__counter' count={p2p_notification_count} />}\n    </React.Fragment>\n);\n\nCashierNotifications.propTypes = {\n    p2p_notification_count: PropTypes.number,\n};\n\nexport default CashierNotifications;\n","/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport { action, computed, observable, toJS, reaction, when } from 'mobx';\nimport {\n    routes,\n    isCryptocurrency,\n    formatMoney,\n    getCurrencies,\n    getDecimalPlaces,\n    getCurrencyDisplayCode,\n    isEmptyObject,\n    getPropertyValue,\n    getMT5AccountDisplay,\n    getMT5Account,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport OnRampStore from './on-ramp-store';\nimport BaseStore from '../base-store';\nimport CashierNotifications from '../../Containers/cashier-notifications.jsx';\n\nconst hasTransferNotAllowedLoginid = loginid => loginid.startsWith('MX');\n\nconst getSelectedError = (selected_value, is_from_account) => {\n    if (is_from_account) {\n        return (\n            <Localize\n                i18n_default_text='Transfer from {{selected_value}} is not allowed, Please choose another account from dropdown'\n                values={{ selected_value }}\n            />\n        );\n    }\n\n    return (\n        <Localize\n            i18n_default_text='Transfer to {{selected_value}} is not allowed, Please choose another account from dropdown'\n            values={{ selected_value }}\n        />\n    );\n};\n\nclass Config {\n    container = '';\n    is_session_timeout = true;\n    onIframeLoaded = '';\n    timeout_session = '';\n\n    @observable iframe_height = 0;\n    @observable iframe_url = '';\n\n    constructor({ container }) {\n        this.container = container;\n    }\n}\n\nclass ConfigError {\n    @observable message = '';\n    @observable code = '';\n    @observable fields = '';\n    @observable is_show_full_page = false;\n    @observable onClickButton = null;\n    @observable is_ask_uk_funds_protection = false;\n    @observable is_self_exclusion_max_turnover_set = false;\n    @observable is_ask_authentication = false;\n    @observable is_ask_financial_risk_approval = false;\n}\n\nclass ConfigPaymentAgent {\n    list = [];\n\n    @observable agents = [];\n    @observable container = 'payment_agent';\n    @observable error = new ConfigError();\n    @observable filtered_list = [];\n    @observable is_name_selected = true;\n    @observable is_withdraw = false;\n    @observable is_try_withdraw_successful = false;\n    @observable is_withdraw_successful = false;\n    @observable confirm = {};\n    @observable receipt = {};\n    @observable selected_bank = 0;\n    @observable supported_banks = [];\n    @observable verification = new ConfigVerification();\n}\n\nclass ConfigPaymentAgentTransfer {\n    @observable container = 'payment_agent_transfer';\n    @observable error = new ConfigError();\n    @observable is_payment_agent = false;\n    @observable is_try_transfer_successful = false;\n    @observable is_transfer_successful = false;\n    @observable confirm = {};\n    @observable receipt = {};\n    @observable transfer_limit = {};\n}\n\nclass ConfigAccountTransfer {\n    @observable accounts_list = [];\n    @observable container = 'account_transfer';\n    @observable error = new ConfigError();\n    @observable has_no_account = false;\n    @observable has_no_accounts_balance = false;\n    @observable is_transfer_confirm = false;\n    @observable is_transfer_successful = false;\n    @observable minimum_fee = null;\n    @observable receipt = {};\n    @observable selected_from = {};\n    @observable selected_to = {};\n    @observable account_transfer_amount = '';\n    @observable transfer_fee = null;\n    @observable transfer_limit = {};\n\n    @action.bound\n    setBalanceByLoginId(loginid, balance) {\n        this.accounts_list.find(acc => loginid === acc.value).balance = balance;\n    }\n\n    @action.bound\n    setBalanceSelectedFrom(balance) {\n        this.selected_from.balance = balance;\n    }\n\n    @action.bound\n    setBalanceSelectedTo(balance) {\n        this.selected_to.balance = balance;\n    }\n}\n\nclass ConfigVerification {\n    is_button_clicked = false;\n    timeout_button = '';\n\n    @observable error = new ConfigError();\n    @observable is_email_sent = false;\n    @observable is_resend_clicked = false;\n    @observable resend_timeout = 60;\n}\n\nexport default class CashierStore extends BaseStore {\n    constructor({ root_store, WS }) {\n        super({ root_store });\n        this.WS = WS;\n        this.root_store.menu.attach({\n            id: 'dt_cashier_tab',\n            icon: <CashierNotifications p2p_notification_count={this.p2p_notification_count} />,\n            text: () => localize('Cashier'),\n            link_to: routes.cashier,\n            login_only: true,\n        });\n\n        this.onramp = new OnRampStore({\n            root_store: this.root_store,\n            WS: this.WS,\n        });\n        this.init();\n    }\n\n    @observable is_loading = false;\n    @observable is_p2p_visible = false;\n    @observable p2p_notification_count = 0;\n    @observable cashier_route_tab_index = 0;\n\n    @observable config = {\n        account_transfer: new ConfigAccountTransfer(),\n        deposit: {\n            ...toJS(new Config({ container: 'deposit' })),\n            error: new ConfigError(),\n        },\n        payment_agent: new ConfigPaymentAgent(),\n        payment_agent_transfer: new ConfigPaymentAgentTransfer(),\n        withdraw: {\n            ...toJS(new Config({ container: 'withdraw' })),\n            error: new ConfigError(),\n            verification: new ConfigVerification(),\n        },\n    };\n\n    active_container = this.config.deposit.container;\n    onRemount = () => {};\n    is_populating_values = false;\n\n    containers = [this.config.deposit.container, this.config.withdraw.container];\n\n    map_action = {\n        [this.config.withdraw.container]: 'payment_withdraw',\n        [this.config.payment_agent.container]: 'payment_agent_withdraw',\n    };\n\n    @computed\n    get is_payment_agent_visible() {\n        return !!(this.config.payment_agent.filtered_list.length || this.config.payment_agent.agents.length);\n    }\n\n    @computed\n    get is_payment_agent_transfer_visible() {\n        return this.config.payment_agent_transfer.is_payment_agent;\n    }\n\n    @computed\n    get is_account_transfer_visible() {\n        // cashier Transfer account tab is hidden for iom clients\n        // check for residence to hide the tab before creating a real money account\n        return this.root_store.client.residence !== 'im';\n    }\n\n    @computed\n    get is_p2p_enabled() {\n        return this.is_p2p_visible && !this.root_store.client.is_eu;\n    }\n\n    @action.bound\n    setAccountSwitchListener() {\n        // cashier inits once and tries to stay active until switching account\n        // since cashier calls take a long time to respond or display in iframe\n        // so we don't have any unmount function here and everything gets reset on switch instead\n        this.disposeSwitchAccount();\n        this.onSwitchAccount(this.accountSwitcherListener);\n    }\n\n    // Initialise P2P attributes on app load without mounting the entire cashier\n    @action.bound\n    init() {\n        when(\n            () => this.root_store.client.is_logged_in && !this.root_store.client.is_virtual,\n            async () => {\n                await this.checkP2pStatus();\n            }\n        );\n        reaction(\n            () => [\n                this.root_store.client.switched,\n                this.root_store.client.is_logged_in,\n                this.root_store.client.currency,\n            ],\n            async () => {\n                // wait for get_settings so is_virtual gets populated in client-store\n                await this.WS.wait('get_settings');\n\n                if (this.root_store.client.is_logged_in && !this.root_store.client.is_virtual) {\n                    await this.checkP2pStatus();\n                }\n            }\n        );\n    }\n\n    @action.bound\n    async checkP2pStatus() {\n        const advertiser_info = await this.WS.authorized.p2pAdvertiserInfo();\n        const advertiser_error = getPropertyValue(advertiser_info, ['error', 'code']);\n        const is_p2p_restricted = advertiser_error === 'RestrictedCountry' || advertiser_error === 'RestrictedCurrency';\n        this.setIsP2pVisible(!is_p2p_restricted);\n    }\n\n    @action.bound\n    async onMountCommon(should_remount) {\n        if (this.root_store.client.is_logged_in) {\n            // avoid calling this again\n            if (this.is_populating_values) {\n                return;\n            }\n\n            this.is_populating_values = true;\n\n            if (should_remount) {\n                this.onRemount = this.onMountCommon;\n            }\n            // we need to see if client's country has PA\n            // if yes, we can show the PA tab in cashier\n            if (!this.config.payment_agent.list.length) {\n                this.setPaymentAgentList().then(this.filterPaymentAgentList);\n            }\n\n            if (!this.config.payment_agent_transfer.is_payment_agent) {\n                this.checkIsPaymentAgent();\n            }\n\n            if (!this.config.account_transfer.accounts_list.length) {\n                this.sortAccountsTransfer();\n            }\n\n            if (!this.onramp.is_onramp_tab_visible && window.location.pathname.endsWith(routes.cashier_onramp)) {\n                this.root_store.common.routeTo(routes.cashier_deposit);\n            }\n        }\n    }\n\n    @action.bound\n    setCashierTabIndex(index) {\n        this.cashier_route_tab_index = index;\n    }\n    @action.bound\n    setNotificationCount(notification_count) {\n        this.p2p_notification_count = notification_count;\n    }\n\n    @action.bound\n    setIsP2pVisible(is_p2p_visible) {\n        this.is_p2p_visible = is_p2p_visible;\n        if (!is_p2p_visible && window.location.pathname.endsWith(routes.cashier_p2p)) {\n            this.root_store.common.routeTo(routes.cashier_deposit);\n        }\n    }\n\n    @action.bound\n    async onMount(verification_code) {\n        const current_container = this.active_container;\n        this.onRemount = this.onMount;\n        await this.onMountCommon();\n\n        if (this.containers.indexOf(this.active_container) === -1 && !this.root_store.client.is_switching) {\n            throw new Error('Cashier Store onMount requires a valid container name.');\n        }\n        this.setErrorMessage('');\n        this.setContainerHeight(0);\n        this.setLoading(true);\n\n        if (!this.config[this.active_container].is_session_timeout) {\n            this.checkIframeLoaded();\n            return;\n        }\n\n        // if session has timed out reset everything\n        this.setIframeUrl('');\n        if (\n            (this.active_container === this.config.withdraw.container && !verification_code) ||\n            this.root_store.client.is_virtual\n        ) {\n            // if virtual, clear everything and don't proceed further\n            // if no verification code, we should request again\n            return;\n        }\n\n        const response_cashier = await this.WS.authorized.cashier(this.active_container, { verification_code });\n\n        // if tab changed while waiting for response, ignore it\n        if (current_container !== this.active_container) {\n            return;\n        }\n        if (response_cashier.error) {\n            this.handleCashierError(response_cashier.error);\n            this.setLoading(false);\n            this.setSessionTimeout(true);\n            this.clearTimeoutCashierUrl();\n            if (verification_code) {\n                // clear verification code on error\n                this.clearVerification();\n            }\n        } else if (isCryptocurrency(this.root_store.client.currency)) {\n            this.setLoading(false);\n            this.setContainerHeight('540');\n            this.setIframeUrl(response_cashier.cashier);\n            // crypto cashier can only be accessed once and the session expires\n            // so no need to set timeouts to keep the session alive\n        } else {\n            await this.checkIframeLoaded();\n            this.setIframeUrl(response_cashier.cashier);\n            this.setSessionTimeout(false);\n            this.setTimeoutCashierUrl();\n        }\n    }\n\n    @computed\n    get is_cashier_locked() {\n        if (!this.root_store.client.account_status.status) return false;\n        const { status } = this.root_store.client.account_status;\n\n        return status.some(status_name => status_name === 'cashier_locked');\n    }\n\n    @computed\n    get is_deposit_locked() {\n        const {\n            is_authentication_needed,\n            is_tnc_needed,\n            is_financial_account,\n            is_financial_information_incomplete,\n            is_trading_experience_incomplete,\n            account_status,\n            is_eu,\n            mt5_login_list,\n        } = this.root_store.client;\n        if (!account_status.status) return false;\n\n        const need_authentication =\n            this.config.deposit.error.is_ask_authentication || (is_authentication_needed && is_eu);\n        const need_financial_assessment =\n            is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete);\n        // CR can deposit without accepting latest tnc except those with Financial STP\n        const need_tnc =\n            (is_eu ||\n                mt5_login_list.some(\n                    item => item.account_type === 'real' && item.sub_account_type === 'financial_stp'\n                )) &&\n            is_tnc_needed;\n\n        return (\n            need_authentication ||\n            need_tnc ||\n            need_financial_assessment ||\n            this.config.deposit.error.is_ask_financial_risk_approval\n        );\n    }\n\n    @computed\n    get is_withdrawal_locked() {\n        if (!this.root_store.client.account_status.status) return false;\n        const { authentication } = this.root_store.client.account_status;\n        const need_poi = authentication.needs_verification.includes('identity');\n\n        const need_authentication = this.config.withdraw.error.is_ask_authentication && need_poi;\n\n        return (\n            this.root_store.client.is_withdrawal_lock ||\n            need_authentication ||\n            this.config.withdraw.error.is_ask_financial_risk_approval\n        );\n    }\n\n    @computed\n    get is_transfer_locked() {\n        const {\n            is_financial_account,\n            is_financial_information_incomplete,\n            is_trading_experience_incomplete,\n            account_status,\n        } = this.root_store.client;\n\n        if (!account_status.status) return false;\n\n        const need_financial_assessment =\n            is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete);\n\n        return need_financial_assessment && this.config.account_transfer.error.is_ask_financial_risk_approval;\n    }\n\n    @action.bound\n    async checkIframeLoaded() {\n        this.removeOnIframeLoaded();\n        this.config[this.active_container].onIframeLoaded = function (e) {\n            if (/cashier|doughflow/.test(e.origin)) {\n                this.setLoading(false);\n                // set the height of the container after content loads so that the\n                // loading bar stays vertically centered until the end\n                this.setContainerHeight(+e.data || '1200');\n                // do not remove the listener\n                // on every iframe screen change we need to update the height to more/less to match the new content\n            }\n        }.bind(this);\n        window.addEventListener('message', this.config[this.active_container].onIframeLoaded, false);\n    }\n\n    removeOnIframeLoaded(container = this.active_container) {\n        if (this.config[container].onIframeLoaded) {\n            window.removeEventListener('message', this.config[container].onIframeLoaded, false);\n            this.config[container].onIframeLoaded = '';\n        }\n    }\n\n    @action.bound\n    setIframeUrl(url, container = this.active_container) {\n        if (url) {\n            this.config[container].iframe_url = `${url}&theme=${this.root_store.ui.is_dark_mode_on ? 'dark' : 'light'}`;\n            // after we set iframe url we can clear verification code\n            this.root_store.client.setVerificationCode('', this.map_action[container]);\n        } else {\n            this.config[container].iframe_url = url;\n        }\n    }\n\n    @action.bound\n    setContainerHeight(height) {\n        this.config[this.active_container].iframe_height = height;\n    }\n\n    @action.bound\n    setErrorMessage(error, onClickButton, is_show_full_page, is_verification_error) {\n        // for errors that need to show a button, reset the form\n        const error_object = {\n            onClickButton,\n            code: error.code,\n            message: error.message,\n            is_show_full_page: is_show_full_page || /InvalidToken|WrongResponse/.test(error.code),\n            ...(getPropertyValue(error, ['details', 'fields']) && {\n                fields: error.details.fields,\n            }),\n        };\n\n        if (is_verification_error && this.config[this.active_container].verification) {\n            this.config[this.active_container].verification.error = error_object;\n        } else {\n            this.config[this.active_container].error = error_object;\n        }\n    }\n\n    @action.bound\n    handleCashierError(error) {\n        switch (error.code) {\n            case 'ASK_TNC_APPROVAL':\n                this.setErrorMessage(error, null, true);\n                break;\n            case 'ASK_FIX_DETAILS':\n                this.setErrorMessage(error, null, true);\n                break;\n            case 'ASK_UK_FUNDS_PROTECTION':\n                this.config[this.active_container].error = {\n                    is_ask_uk_funds_protection: true,\n                };\n                break;\n            case 'ASK_SELF_EXCLUSION_MAX_TURNOVER_SET':\n                this.config[this.active_container].error = {\n                    is_self_exclusion_max_turnover_set: true,\n                };\n                break;\n            case 'ASK_AUTHENTICATE':\n            case 'ASK_AGE_VERIFICATION':\n                this.config[this.active_container].error = {\n                    is_ask_authentication: true,\n                };\n                break;\n            case 'FinancialAssessmentRequired':\n            case 'ASK_FINANCIAL_RISK_APPROVAL':\n                this.config[this.active_container].error = {\n                    is_ask_financial_risk_approval: true,\n                };\n                break;\n            default:\n                this.config[this.active_container].error = {\n                    is_ask_uk_funds_protection: false,\n                    is_self_exclusion_max_turnover_set: false,\n                    is_ask_authentication: false,\n                    is_ask_financial_risk_approval: false,\n                };\n                this.setErrorMessage(error);\n        }\n    }\n\n    @action.bound\n    setErrorConfig(config_name, value) {\n        this.config[this.active_container].error = {\n            [config_name]: value,\n        };\n    }\n\n    @action.bound\n    submitFundsProtection() {\n        this.WS.send({ ukgc_funds_protection: 1, tnc_approval: 1 }).then(response => {\n            if (response.error) {\n                this.setErrorConfig('message', response.error.message);\n            } else {\n                this.setErrorConfig('is_ask_uk_funds_protection', false);\n                this.onMount();\n            }\n        });\n    }\n\n    @action.bound\n    setLoading(is_loading) {\n        this.is_loading = is_loading;\n    }\n\n    @action.bound\n    setSessionTimeout(is_session_time_out, container = this.active_container) {\n        this.config[container].is_session_timeout = is_session_time_out;\n        if (is_session_time_out) {\n            this.removeOnIframeLoaded(container);\n        }\n    }\n\n    @action.bound\n    setVerificationButtonClicked(is_button_clicked, container = this.active_container) {\n        this.config[container].verification.is_button_clicked = is_button_clicked;\n    }\n\n    @action.bound\n    setVerificationEmailSent(is_email_sent, container = this.active_container) {\n        this.config[container].verification.is_email_sent = is_email_sent;\n    }\n\n    @action.bound\n    setVerificationResendClicked(is_resend_clicked, container = this.active_container) {\n        this.config[container].verification.is_resend_clicked = is_resend_clicked;\n    }\n\n    @action.bound\n    setVerificationResendTimeout(resend_timeout, container = this.active_container) {\n        this.config[container].verification.resend_timeout = resend_timeout;\n    }\n\n    clearTimeoutCashierUrl(container = this.active_container) {\n        if (this.config[container].timeout_session) {\n            clearTimeout(this.config[container].timeout_session);\n        }\n    }\n\n    // cashier session expires after one minute\n    // so we should resend the request for container (deposit|withdraw) url on next mount\n    @action.bound\n    setTimeoutCashierUrl() {\n        this.clearTimeoutCashierUrl();\n        this.config[this.active_container].timeout_session = setTimeout(() => {\n            this.setSessionTimeout(true);\n        }, 60000);\n    }\n\n    clearTimeoutVerification(container = this.active_container) {\n        if (this.config[container].verification.timeout_button) {\n            clearTimeout(this.config[container].verification.timeout_button);\n        }\n    }\n\n    // verification token expires after one hour\n    // so we should show the verification request button again after that\n    @action.bound\n    setTimeoutVerification() {\n        this.clearTimeoutVerification();\n        this.config[this.active_container].verification.timeout_button = setTimeout(() => {\n            this.clearVerification();\n        }, 3600000);\n    }\n\n    @action.bound\n    async sendVerificationEmail() {\n        if (this.config[this.active_container].verification.is_button_clicked || !this.root_store.client.email) {\n            return;\n        }\n\n        this.setErrorMessage('');\n        this.setVerificationButtonClicked(true);\n        const withdrawal_type = `payment${\n            this.active_container === this.config.payment_agent.container ? 'agent' : ''\n        }_withdraw`;\n\n        const response_verify_email = await this.WS.verifyEmail(this.root_store.client.email, withdrawal_type);\n        if (response_verify_email.error) {\n            this.clearVerification();\n            this.setErrorMessage(\n                response_verify_email.error,\n                () => {\n                    this.setErrorMessage('', null, null, true);\n                },\n                null,\n                true\n            );\n        } else {\n            this.setVerificationEmailSent(true);\n            this.setTimeoutVerification();\n        }\n    }\n\n    @action.bound\n    resendVerificationEmail() {\n        // don't allow clicking while ongoing timeout\n        if (this.config[this.active_container].verification.resend_timeout < 60) {\n            return;\n        }\n        this.setVerificationButtonClicked(false);\n        this.setCountDownResendVerification();\n        this.sendVerificationEmail();\n    }\n\n    setCountDownResendVerification() {\n        this.setVerificationResendTimeout(this.config[this.active_container].verification.resend_timeout - 1);\n        const resend_interval = setInterval(() => {\n            if (!this.config[this.active_container] || !this.config[this.active_container].verification) {\n                clearInterval(resend_interval);\n                return;\n            }\n\n            if (this.config[this.active_container].verification.resend_timeout === 1) {\n                this.setVerificationResendTimeout(60);\n                clearInterval(resend_interval);\n            } else {\n                this.setVerificationResendTimeout(this.config[this.active_container].verification.resend_timeout - 1);\n            }\n        }, 1000);\n    }\n\n    clearVerification(container = this.active_container) {\n        this.clearTimeoutVerification(container);\n        this.setVerificationButtonClicked(false, container);\n        this.setVerificationEmailSent(false, container);\n        this.setVerificationResendClicked(false, container);\n        this.setVerificationResendTimeout(60, container);\n        this.setErrorMessage('', null, null, true);\n        this.root_store.client.setVerificationCode('', this.map_action[container]);\n    }\n\n    @action.bound\n    setActiveTab(container) {\n        this.active_container = container;\n    }\n\n    @action.bound\n    async onMountPaymentAgentList() {\n        this.setLoading(true);\n        this.onRemount = this.onMountPaymentAgentList;\n        await this.onMountCommon();\n\n        this.setLoading(false);\n    }\n\n    @action.bound\n    async getPaymentAgentList() {\n        if (this.config.payment_agent.list.length) {\n            return this.WS.wait('paymentagent_list');\n        }\n\n        // wait for get_settings so residence gets populated in client-store\n        // TODO: set residence in client-store from authorize so it's faster\n        await this.WS.wait('get_settings');\n        return this.WS.authorized.paymentAgentList(this.root_store.client.residence, this.root_store.client.currency);\n    }\n\n    @action.bound\n    addSupportedBank(bank) {\n        const supported_bank_exists = this.config.payment_agent.supported_banks.find(\n            supported_bank => supported_bank.value === bank.toLowerCase()\n        );\n        if (!supported_bank_exists) {\n            this.config.payment_agent.supported_banks.push({ text: bank, value: bank.toLowerCase() });\n        }\n    }\n\n    @action.bound\n    sortSupportedBanks() {\n        // sort supported banks alphabetically by value, the option 'All payment agents' with value 0 should be on top\n        this.config.payment_agent.supported_banks.replace(\n            this.config.payment_agent.supported_banks.slice().sort(function (a, b) {\n                if (a.value < b.value) {\n                    return -1;\n                }\n                if (a.value > b.value) {\n                    return 1;\n                }\n                return 0;\n            })\n        );\n    }\n\n    @action.bound\n    async setPaymentAgentList(pa_list) {\n        const payment_agent_list = pa_list || (await this.getPaymentAgentList());\n        if (!payment_agent_list || !payment_agent_list.paymentagent_list) {\n            return;\n        }\n\n        payment_agent_list.paymentagent_list.list.forEach(payment_agent => {\n            this.config.payment_agent.list.push({\n                email: payment_agent.email,\n                phone: payment_agent.telephone,\n                name: payment_agent.name,\n                supported_banks: payment_agent.supported_banks,\n                url: payment_agent.url,\n            });\n            if (payment_agent.supported_banks) {\n                payment_agent.supported_banks.split(',').forEach(bank => {\n                    this.addSupportedBank(bank);\n                });\n            }\n        });\n\n        this.sortSupportedBanks();\n    }\n\n    @action.bound\n    filterPaymentAgentList(bank) {\n        if (bank) {\n            this.config.payment_agent.filtered_list = [];\n            this.config.payment_agent.list.forEach(payment_agent => {\n                if (\n                    payment_agent.supported_banks &&\n                    payment_agent.supported_banks.toLowerCase().split(',').indexOf(bank) !== -1\n                ) {\n                    this.config.payment_agent.filtered_list.push(payment_agent);\n                }\n            });\n        } else {\n            this.config.payment_agent.filtered_list = this.config.payment_agent.list;\n        }\n        if (!this.is_payment_agent_visible && window.location.pathname.endsWith(routes.cashier_pa)) {\n            this.root_store.common.routeTo(routes.cashier_deposit);\n        }\n    }\n\n    @action.bound\n    onChangePaymentMethod({ target }) {\n        const value = target.value === '0' ? parseInt(target.value) : target.value;\n        this.config.payment_agent.selected_bank = value;\n        this.filterPaymentAgentList(value);\n    }\n\n    @action.bound\n    async onMountPaymentAgentWithdraw() {\n        this.setLoading(true);\n        this.onRemount = this.onMountPaymentAgentWithdraw;\n        await this.onMountCommon();\n\n        this.setIsWithdraw(true);\n        this.setIsWithdrawSuccessful(false);\n        this.setReceipt({});\n\n        if (!this.config.payment_agent.agents.length) {\n            const payment_agent_list = await this.getPaymentAgentList();\n            payment_agent_list.paymentagent_list.list.forEach(payment_agent => {\n                this.addPaymentAgent(payment_agent);\n            });\n            if (\n                !payment_agent_list.paymentagent_list.list.length &&\n                window.location.pathname.endsWith(routes.cashier_pa)\n            ) {\n                this.root_store.common.routeTo(routes.cashier_deposit);\n            }\n\n            this.setLoading(false);\n        } else {\n            this.setLoading(false);\n        }\n    }\n\n    @action.bound\n    setIsWithdraw(is_withdraw = !this.config.payment_agent.is_withdraw) {\n        this.config.payment_agent.is_withdraw = is_withdraw;\n    }\n\n    @action.bound\n    setIsTryWithdrawSuccessful(is_try_withdraw_successful) {\n        this.setErrorMessage('');\n        this.config.payment_agent.is_try_withdraw_successful = is_try_withdraw_successful;\n    }\n\n    @action.bound\n    setIsWithdrawSuccessful(is_withdraw_successful) {\n        this.config.payment_agent.is_withdraw_successful = is_withdraw_successful;\n    }\n\n    @action.bound\n    setConfirmation({ amount, currency, loginid, payment_agent_name }) {\n        this.config.payment_agent.confirm = {\n            amount,\n            currency,\n            loginid,\n            payment_agent_name,\n        };\n    }\n\n    @action.bound\n    setReceipt({\n        amount_transferred,\n        payment_agent_email,\n        payment_agent_id,\n        payment_agent_name,\n        payment_agent_phone,\n        payment_agent_url,\n    }) {\n        this.config.payment_agent.receipt = {\n            amount_transferred,\n            payment_agent_email,\n            payment_agent_id,\n            payment_agent_name,\n            payment_agent_phone,\n            payment_agent_url,\n        };\n    }\n\n    @action.bound\n    addPaymentAgent(payment_agent) {\n        this.config.payment_agent.agents.push({\n            text: payment_agent.name,\n            value: payment_agent.paymentagent_loginid,\n            max_withdrawal: payment_agent.max_withdrawal,\n            min_withdrawal: payment_agent.min_withdrawal,\n            email: payment_agent.email,\n            phone: payment_agent.telephone,\n            url: payment_agent.url,\n        });\n    }\n\n    @action.bound\n    async requestTryPaymentAgentWithdraw({ loginid, currency, amount, verification_code }) {\n        this.setErrorMessage('');\n        const payment_agent_withdraw = await this.WS.authorized.paymentAgentWithdraw({\n            loginid,\n            currency,\n            amount,\n            verification_code,\n            dry_run: 1,\n        });\n        if (+payment_agent_withdraw.paymentagent_withdraw === 2) {\n            const selected_agent = this.config.payment_agent.agents.find(agent => agent.value === loginid);\n            this.setConfirmation({\n                amount,\n                currency,\n                loginid,\n                ...(selected_agent && { payment_agent_name: selected_agent.text }),\n            });\n            this.setIsTryWithdrawSuccessful(true);\n        } else {\n            this.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\n        }\n    }\n\n    @action.bound\n    async requestPaymentAgentWithdraw({ loginid, currency, amount, verification_code }) {\n        this.setErrorMessage('');\n        const payment_agent_withdraw = await this.WS.authorized.paymentAgentWithdraw({\n            loginid,\n            currency,\n            amount,\n            verification_code,\n        });\n        if (+payment_agent_withdraw.paymentagent_withdraw === 1) {\n            const selected_agent = this.config.payment_agent.agents.find(agent => agent.value === loginid);\n            this.setReceipt({\n                amount_transferred: formatMoney(currency, amount, true),\n                ...(selected_agent && {\n                    payment_agent_email: selected_agent.email,\n                    payment_agent_id: selected_agent.value,\n                    payment_agent_name: selected_agent.text,\n                    payment_agent_phone: selected_agent.phone,\n                    payment_agent_url: selected_agent.url,\n                }),\n                ...(!selected_agent && {\n                    payment_agent_id: loginid,\n                }),\n            });\n            this.setIsWithdrawSuccessful(true);\n            this.setIsTryWithdrawSuccessful(false);\n            this.setConfirmation({});\n        } else {\n            this.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\n        }\n    }\n\n    @action.bound\n    resetPaymentAgent = () => {\n        this.setErrorMessage('');\n        this.setIsWithdraw(false);\n        this.clearVerification();\n    };\n\n    // possible transfers:\n    // 1. fiat to crypto & vice versa\n    // 2. fiat to mt & vice versa\n    // 3. crypto to mt & vice versa\n    @action.bound\n    async onMountAccountTransfer() {\n        this.setLoading(true);\n        this.onRemount = this.onMountAccountTransfer;\n        await this.onMountCommon();\n        await this.WS.wait('website_status');\n\n        // check if some balance update has come in since the last mount\n        const has_updated_account_balance =\n            this.config.account_transfer.has_no_accounts_balance &&\n            Object.keys(this.root_store.client.active_accounts).find(\n                account =>\n                    !this.root_store.client.active_accounts[account].is_virtual &&\n                    this.root_store.client.active_accounts[account].balance\n            );\n        if (has_updated_account_balance) {\n            this.setHasNoAccountsBalance(false);\n        }\n\n        // various issues happen when loading from cache\n        // e.g. new account may have been created, transfer may have been done elsewhere, etc\n        // so on load of this page just call it again\n        if (this.root_store.client.is_logged_in) {\n            const transfer_between_accounts = await this.WS.authorized.transferBetweenAccounts();\n\n            if (transfer_between_accounts.error) {\n                this.setErrorMessage(transfer_between_accounts.error, this.onMountAccountTransfer);\n                this.setLoading(false);\n                return;\n            }\n\n            if (!this.canDoAccountTransfer(transfer_between_accounts.accounts)) {\n                return;\n            }\n\n            await this.sortAccountsTransfer(transfer_between_accounts);\n            this.setTransferFee();\n            this.setMinimumFee();\n            this.setTransferLimit();\n        }\n        this.setLoading(false);\n    }\n\n    canDoAccountTransfer(accounts) {\n        let can_transfer = true;\n        // should have at least one account with balance\n        if (!accounts.find(account => +account.balance > 0)) {\n            can_transfer = false;\n            this.setHasNoAccountsBalance(true);\n        } else {\n            this.setHasNoAccountsBalance(false);\n        }\n        // should have at least two real-money accounts\n        if (accounts.length <= 1) {\n            can_transfer = false;\n            this.setHasNoAccount(true);\n        } else {\n            this.setHasNoAccount(false);\n        }\n        if (!can_transfer) {\n            this.setLoading(false);\n        }\n        return can_transfer;\n    }\n\n    @action.bound\n    setHasNoAccountsBalance(has_no_accounts_balance) {\n        this.config.account_transfer.has_no_accounts_balance = has_no_accounts_balance;\n    }\n\n    @action.bound\n    setHasNoAccount(has_no_account) {\n        this.config.account_transfer.has_no_account = has_no_account;\n    }\n\n    @action.bound\n    setTransferFee() {\n        const transfer_fee = getPropertyValue(getCurrencies(), [\n            this.config.account_transfer.selected_from.currency,\n            'transfer_between_accounts',\n            'fees',\n            this.config.account_transfer.selected_to.currency,\n        ]);\n        this.config.account_transfer.transfer_fee = typeof transfer_fee === 'undefined' ? 1 : +transfer_fee;\n    }\n\n    @action.bound\n    setMinimumFee() {\n        const decimals = getDecimalPlaces(this.config.account_transfer.selected_from.currency);\n        // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\n        this.config.account_transfer.minimum_fee = (1 / Math.pow(10, decimals)).toFixed(decimals);\n    }\n\n    @action.bound\n    setTransferLimit() {\n        const is_mt_transfer =\n            this.config.account_transfer.selected_from.is_mt || this.config.account_transfer.selected_to.is_mt;\n        const transfer_limit = getPropertyValue(getCurrencies(), [\n            this.config.account_transfer.selected_from.currency,\n            'transfer_between_accounts',\n            is_mt_transfer ? 'limits_mt5' : 'limits',\n        ]);\n        const balance = this.config.account_transfer.selected_from.balance;\n        const decimal_places = getDecimalPlaces(this.config.account_transfer.selected_from.currency);\n        // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\n        this.config.account_transfer.transfer_limit = {\n            max:\n                !transfer_limit?.max || (+balance >= (transfer_limit?.min || 0) && +balance <= transfer_limit?.max)\n                    ? balance\n                    : transfer_limit?.max.toFixed(decimal_places),\n            min: transfer_limit?.min ? (+transfer_limit?.min).toFixed(decimal_places) : null,\n        };\n    }\n\n    @action.bound\n    async sortAccountsTransfer(response_accounts) {\n        const transfer_between_accounts = response_accounts || (await this.WS.authorized.transferBetweenAccounts());\n        if (!this.config.account_transfer.accounts_list.length) {\n            // should have more than one account\n            if (transfer_between_accounts.error || transfer_between_accounts.accounts.length <= 1) {\n                return;\n            }\n        }\n\n        const mt5_login_list = (await this.WS.storage.mt5LoginList())?.mt5_login_list;\n        // TODO: remove this temporary mapping when API adds market_type and sub_account_type to transfer_between_accounts\n        const accounts = transfer_between_accounts.accounts.map(account => {\n            if (account.account_type === 'mt5') {\n                // account_type in transfer_between_accounts (mt5|binary)\n                // gets overridden by account_type in mt5_login_list (demo|real)\n                // since in cashier all these are real accounts, the mt5 account type is what we want to keep\n                return {\n                    ...account,\n                    ...mt5_login_list.find(acc => acc.login === account.loginid),\n                    account_type: 'mt5',\n                };\n            }\n            return account;\n        });\n        // sort accounts as follows:\n        // for MT5, synthetic, financial, financial stp\n        // for non-MT5, fiat, crypto (alphabetically by currency)\n        accounts.sort((a, b) => {\n            const a_is_mt = a.account_type === 'mt5';\n            const b_is_mt = b.account_type === 'mt5';\n            const a_is_crypto = !a_is_mt && isCryptocurrency(a.currency);\n            const b_is_crypto = !b_is_mt && isCryptocurrency(b.currency);\n            const a_is_fiat = !a_is_mt && !a_is_crypto;\n            const b_is_fiat = !b_is_mt && !b_is_crypto;\n            if (a_is_mt && b_is_mt) {\n                if (a.market_type === 'gaming') {\n                    return -1;\n                }\n                if (a.sub_account_type === 'financial') {\n                    return b.market_type === 'gaming' ? 1 : -1;\n                }\n                return 1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a.currency < b.currency ? -1 : 1;\n            } else if ((a_is_crypto && b_is_mt) || (a_is_fiat && b_is_crypto) || (a_is_fiat && b_is_mt)) {\n                return -1;\n            }\n            return a_is_mt ? -1 : 1;\n        });\n        const arr_accounts = [];\n        this.setSelectedTo({}); // set selected to empty each time so we can redetermine its value on reload\n        accounts.forEach(account => {\n            const obj_values = {\n                text:\n                    account.account_type === 'mt5'\n                        ? `${localize('DMT5')} ${getMT5AccountDisplay(account.market_type, account.sub_account_type)}`\n                        : getCurrencyDisplayCode(\n                              account.currency !== 'eUSDT' ? account.currency.toUpperCase() : account.currency\n                          ),\n                value: account.loginid,\n                balance: account.balance,\n                currency: account.currency,\n                is_crypto: isCryptocurrency(account.currency),\n                is_mt: account.account_type === 'mt5',\n                ...(account.account_type === 'mt5' && {\n                    mt_icon: getMT5Account(account.market_type, account.sub_account_type),\n                }),\n            };\n            // set current logged in client as the default transfer from account\n            if (account.loginid === this.root_store.client.loginid) {\n                // check if selected from is not allowed account\n                if (hasTransferNotAllowedLoginid(obj_values.value)) {\n                    obj_values.error = getSelectedError(obj_values.value, true);\n                }\n\n                this.setSelectedFrom(obj_values);\n            } else if (isEmptyObject(this.config.account_transfer.selected_to)) {\n                if (hasTransferNotAllowedLoginid(obj_values.value)) {\n                    // check if selected to is not allowed account\n                    obj_values.error = getSelectedError(obj_values.value);\n                }\n                // set the first available account as the default transfer to account\n                this.setSelectedTo(obj_values);\n            }\n            arr_accounts.push(obj_values);\n        });\n        this.setAccounts(arr_accounts);\n    }\n\n    @action.bound\n    setSelectedFrom(obj_values) {\n        this.config.account_transfer.selected_from = obj_values;\n    }\n\n    @action.bound\n    setSelectedTo(obj_values) {\n        this.config.account_transfer.selected_to = obj_values;\n    }\n\n    @action.bound\n    setAccounts(arr_accounts) {\n        this.config.account_transfer.accounts_list = arr_accounts;\n    }\n\n    @action.bound\n    setIsTryTransferSuccessful(is_try_transfer_successful) {\n        this.setErrorMessage('');\n        this.config[this.active_container].is_try_transfer_successful = is_try_transfer_successful;\n    }\n\n    @action.bound\n    setIsTransferConfirm(is_transfer_confirm) {\n        this.config[this.active_container].is_transfer_confirm = is_transfer_confirm;\n    }\n\n    @action.bound\n    setAccountTransferAmount(amount) {\n        this.config[this.active_container].account_transfer_amount = amount;\n    }\n\n    @action.bound\n    setIsTransferSuccessful(is_transfer_successful) {\n        this.config[this.active_container].is_transfer_successful = is_transfer_successful;\n    }\n\n    @action.bound\n    setReceiptTransfer({ amount }) {\n        this.config.account_transfer.receipt = {\n            amount_transferred: amount,\n        };\n    }\n\n    @action.bound\n    onChangeTransferFrom({ target }) {\n        this.setErrorMessage('');\n        this.config.account_transfer.selected_from.error = '';\n\n        const accounts = this.config.account_transfer.accounts_list;\n        const selected_from = accounts.find(account => account.value === target.value);\n\n        // if new value of selected_from is the same as the current selected_to\n        // switch the value of selected_from and selected_to\n        if (selected_from.value === this.config.account_transfer.selected_to.value) {\n            this.onChangeTransferTo({ target: { value: this.config.account_transfer.selected_from.value } });\n        } else if (selected_from.is_mt && this.config.account_transfer.selected_to.is_mt) {\n            // not allowed to transfer from MT to MT\n            const first_non_mt = this.config.account_transfer.accounts_list.find(account => !account.is_mt);\n            this.onChangeTransferTo({ target: { value: first_non_mt.value } });\n        } else if (selected_from.is_crypto && this.config.account_transfer.selected_to.is_crypto) {\n            // not allowed to transfer crypto to crypto\n            const first_fiat = this.config.account_transfer.accounts_list.find(account => !account.is_crypto);\n            this.onChangeTransferTo({ target: { value: first_fiat.value } });\n        }\n\n        if (hasTransferNotAllowedLoginid(selected_from.value)) {\n            selected_from.error = getSelectedError(selected_from.value, true);\n        }\n\n        this.config.account_transfer.selected_from = selected_from;\n        this.setTransferFee();\n        this.setMinimumFee();\n        this.setTransferLimit();\n    }\n\n    @action.bound\n    onChangeTransferTo({ target }) {\n        this.setErrorMessage('');\n        this.config.account_transfer.selected_to.error = '';\n\n        const accounts = this.config.account_transfer.accounts_list;\n        this.config.account_transfer.selected_to = accounts.find(account => account.value === target.value) || {};\n        if (hasTransferNotAllowedLoginid(this.config.account_transfer.selected_to.value)) {\n            this.config.account_transfer.selected_to.error = getSelectedError(\n                this.config.account_transfer.selected_to.value\n            );\n        }\n        this.setTransferFee();\n        this.setTransferLimit();\n    }\n\n    requestTransferBetweenAccounts = async ({ amount }) => {\n        if (!this.root_store.client.is_logged_in) {\n            return null;\n        }\n\n        this.setLoading(true);\n        this.setErrorMessage('');\n        const currency = this.config.account_transfer.selected_from.currency;\n        const transfer_between_accounts = await this.WS.authorized.transferBetweenAccounts(\n            this.config.account_transfer.selected_from.value,\n            this.config.account_transfer.selected_to.value,\n            currency,\n            amount\n        );\n        if (transfer_between_accounts.error) {\n            // if there is fiat2crypto transfer limit error, we need to refresh the account_status for authentication\n            if (transfer_between_accounts.error.code === 'Fiat2CryptoTransferOverLimit') {\n                const account_status_response = await this.WS.authorized.getAccountStatus();\n                if (!account_status_response.error) {\n                    this.root_store.client.setAccountStatus(account_status_response.get_account_status);\n                }\n            }\n            this.setErrorMessage(transfer_between_accounts.error);\n        } else {\n            this.setReceiptTransfer({ amount: formatMoney(currency, amount, true) });\n            transfer_between_accounts.accounts.forEach(account => {\n                this.config.account_transfer.setBalanceByLoginId(account.loginid, account.balance);\n                if (account.loginid === this.config.account_transfer.selected_from.value) {\n                    this.config.account_transfer.setBalanceSelectedFrom(account.balance);\n                } else if (account.loginid === this.config.account_transfer.selected_to.value) {\n                    this.config.account_transfer.setBalanceSelectedTo(account.balance);\n                }\n                // if one of the accounts was mt5\n                if (account.account_type === 'mt5') {\n                    // update the balance for account switcher by renewing the mt5_login_list response\n                    this.WS.mt5LoginList().then(this.root_store.client.responseMt5LoginList);\n                    // update total balance since MT5 total only comes in non-stream balance call\n                    this.WS.balanceAll().then(response => {\n                        this.root_store.client.setBalanceOtherAccounts(response.balance);\n                    });\n                }\n            });\n            this.setAccountTransferAmount(null);\n            this.setIsTransferConfirm(false);\n            this.setIsTransferSuccessful(true);\n        }\n        this.setLoading(false);\n        return transfer_between_accounts;\n    };\n\n    @action.bound\n    resetAccountTransfer = async () => {\n        this.setIsTransferSuccessful(false);\n    };\n\n    @action.bound\n    async onMountPaymentAgentTransfer() {\n        this.setLoading(true);\n        this.onRemount = this.onMountPaymentAgentTransfer;\n        await this.onMountCommon();\n\n        if (!this.config.payment_agent_transfer.transfer_limit.min_withdrawal) {\n            const response = await this.getPaymentAgentList();\n            const current_payment_agent = this.getCurrentPaymentAgent(response);\n            this.setMinMaxPaymentAgentTransfer(current_payment_agent);\n        }\n        this.setLoading(false);\n    }\n\n    getCurrentPaymentAgent(response_payment_agent) {\n        return (\n            response_payment_agent.paymentagent_list.list.find(\n                agent => agent.paymentagent_loginid === this.root_store.client.loginid\n            ) || {}\n        );\n    }\n\n    async checkIsPaymentAgent() {\n        const get_settings = (await this.WS.authorized.storage.getSettings()).get_settings;\n        this.setIsPaymentAgent(get_settings?.is_authenticated_payment_agent ?? false);\n    }\n\n    @action.bound\n    setIsPaymentAgent(is_payment_agent) {\n        if (!is_payment_agent && window.location.pathname.endsWith(routes.cashier_pa_transfer)) {\n            this.root_store.common.routeTo(routes.cashier_deposit);\n        }\n        this.config.payment_agent_transfer.is_payment_agent = !!is_payment_agent;\n    }\n\n    @action.bound\n    setMinMaxPaymentAgentTransfer({ min_withdrawal, max_withdrawal }) {\n        this.config.payment_agent_transfer.transfer_limit = {\n            min: min_withdrawal,\n            max: max_withdrawal,\n        };\n    }\n\n    @action.bound\n    setConfirmationPaymentAgentTransfer({ amount, client_id, client_name, description }) {\n        this.config.payment_agent_transfer.confirm = {\n            amount,\n            client_id,\n            client_name,\n            description,\n        };\n    }\n\n    @action.bound\n    requestTryPaymentAgentTransfer = async ({ amount, currency, description, transfer_to }) => {\n        this.setErrorMessage('');\n        const payment_agent_transfer = await this.WS.authorized.paymentAgentTransfer({\n            amount,\n            currency,\n            description,\n            transfer_to,\n            dry_run: 1,\n        });\n        if (+payment_agent_transfer.paymentagent_transfer === 2) {\n            // show confirmation screen\n            this.setConfirmationPaymentAgentTransfer({\n                client_id: transfer_to,\n                client_name: payment_agent_transfer.client_to_full_name,\n                amount,\n                description,\n            });\n            this.setIsTryTransferSuccessful(true);\n        } else {\n            this.setErrorMessage(payment_agent_transfer.error, this.resetPaymentAgentTransfer);\n        }\n\n        return payment_agent_transfer;\n    };\n\n    @action.bound\n    setReceiptPaymentAgentTransfer({ amount_transferred, client_id, client_name }) {\n        this.config.payment_agent_transfer.receipt = {\n            amount_transferred,\n            client_id,\n            client_name,\n        };\n    }\n\n    @action.bound\n    requestPaymentAgentTransfer = async ({ amount, currency, description, transfer_to }) => {\n        this.setErrorMessage('');\n        const payment_agent_transfer = await this.WS.authorized.paymentAgentTransfer({\n            amount,\n            currency,\n            description,\n            transfer_to,\n        });\n        if (+payment_agent_transfer.paymentagent_transfer === 1) {\n            this.setReceiptPaymentAgentTransfer({\n                amount_transferred: amount,\n                client_id: transfer_to,\n                client_name: payment_agent_transfer.client_to_full_name,\n            });\n            this.setIsTransferSuccessful(true);\n            this.setIsTryTransferSuccessful(false);\n            this.setConfirmationPaymentAgentTransfer({});\n        } else {\n            this.setErrorMessage(payment_agent_transfer.error, this.resetPaymentAgentTransfer);\n        }\n\n        return payment_agent_transfer;\n    };\n\n    @action.bound\n    resetPaymentAgentTransfer = () => {\n        this.setIsTransferSuccessful(false);\n        this.setErrorMessage('');\n    };\n\n    accountSwitcherListener() {\n        [this.config.withdraw.container, this.config.payment_agent.container].forEach(container => {\n            this.clearVerification(container);\n        });\n        [this.config.deposit.container, this.config.withdraw.container].forEach(container => {\n            this.setIframeUrl('', container);\n            this.clearTimeoutCashierUrl(container);\n            this.setSessionTimeout(true, container);\n        });\n        this.config.payment_agent = new ConfigPaymentAgent();\n        this.config.account_transfer = new ConfigAccountTransfer();\n        this.config.payment_agent_transfer = new ConfigPaymentAgentTransfer();\n        this.is_populating_values = false;\n\n        this.onRemount();\n\n        return Promise.resolve();\n    }\n}\n","const template = (string, content) => {\n    let to_replace = content;\n    if (content && !Array.isArray(content)) {\n        to_replace = [content];\n    }\n    return string.replace(/\\[_(\\d+)]/g, (s, index) => to_replace[+index - 1]);\n};\n\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach(attr => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash =\n        static_hash || (document.querySelector('script[src*=\"main\"]').getAttribute('src') || '').split('.')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nconst copyToClipboard = text => {\n    const textField = document.createElement('textarea');\n    textField.innerText = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n};\n// eu countries to support\nconst eu_countries = [\n    'it',\n    'de',\n    'fr',\n    'lu',\n    'gr',\n    'mf',\n    'es',\n    'sk',\n    'lt',\n    'nl',\n    'at',\n    'bg',\n    'si',\n    'cy',\n    'be',\n    'ro',\n    'hr',\n    'pt',\n    'pl',\n    'lv',\n    'ee',\n    'cz',\n    'fi',\n    'hu',\n    'dk',\n    'se',\n    'ie',\n    'im',\n    'gb',\n    'mt',\n];\n// check if client is from EU\nconst isEuCountry = country => eu_countries.includes(country);\n\nmodule.exports = {\n    template,\n    createElement,\n    getStaticHash,\n    PromiseClass,\n    isEuCountry,\n    copyToClipboard,\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;"],"sourceRoot":""}
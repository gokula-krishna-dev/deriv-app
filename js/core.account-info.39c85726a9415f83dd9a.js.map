{"version":3,"sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher-account-list.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-account-wrapper.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-mobile.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["CurrencyDisplay","currency","is_virtual","i18n_default_text","getCurrencyName","AccountDisplay","market_type","sub_account_type","getMT5AccountDisplay","AccountList","balance","currency_icon","display_type","has_balance","has_reset_balance","is_disabled","loginid","onClickAccount","onClickResetVirtualBalance","selected_loginid","currency_badge","id","className","classNames","onClick","undefined","icon","size","e","stopPropagation","secondary","small","localize","color","styles","fontWeight","getCurrencyDisplayCode","amount","formatMoney","should_format","show_currency","AccountWrapper","children","header","is_visible","toggleVisibility","title","is_expanded","onToggle","is_title_spaced","propTypes","PropTypes","node","oneOfType","object","string","bool","func","AccountSwitcher","props","React","should_show_real_accounts_list","active_tab_index","setActiveTabIndex","is_deriv_demo_visible","setDerivDemoVisible","is_deriv_real_visible","setDerivRealVisible","is_dmt5_demo_visible","setDmt5DemoVisible","is_dmt5_real_visible","setDmt5RealVisible","wrapper_ref","section","handleLogout","closeAccountsDialog","is_positions_drawer_on","togglePositionsDrawer","logoutClient","then","routeBackInApp","history","toggleAccountsDialog","useOnClickOutside","event","target","classList","contains","redirectToMt5","account_type","push","routes","mt5","should_redirect_fstp_password","is_fully_authenticated","account_settings","citizen","tax_identification_number","tax_residence","hasRequiredCredentials","redirectToMt5Real","redirectToMt5Demo","isDemo","account","getRemainingAccounts","existing_mt5_accounts","gaming_config","getMtConfig","landing_companies","mt_gaming_company","financial_config","mt_financial_company","landing_company","mt5_config","Object","keys","forEach","company","find","type","getMT5AccountKey","getMT5Account","doSwitch","account_loginid","switchAccount","resetBalance","resetVirtualBalance","isRealAccountTab","getSortedAccountList","account_list","slice","sort","a","b","a_currency","accounts","b_currency","a_is_crypto","isCryptocurrency","b_is_crypto","a_is_fiat","b_is_fiat","getSortedMT5List","mt5_login_list","a_is_demo","b_is_demo","getDemoMT5","filter","getRealMT5","canOpenMulti","is_eu","available_crypto_currencies","length","has_fiat","is_logged_in","vrtc_loginid","vrtc_balance","mt5_demo_total","total_assets_message_demo","is_mt5_allowed","total_assets_message_real","total_assets_message","demo_accounts","map","key","is_loading_mt5","speed","login","display_login","sessionStorage","setItem","real_accounts","upgradeable_landing_companies","index","getAccountTitle","account_residence","client_residence","openRealAccountSignup","can_upgrade_to","some","toggleSetCurrencyModal","mt5_login_list_error","has_required_account","has_malta_account","has_maltainvest_account","openAccountNeededModal","standpoint","gaming_company","financial_company","has_active_real_account","is_pending_authentication","ref","active_index","onTabItemClick","top","label","height","max_autoheight_offset","is_mobile","line_height","weight","obj_total_balance","amount_real","amount_mt5","reduce","total","Array","isArray","is_uk","has_any_real_account","has_effect","toggleAccountTypesModal","text","align","array","can_change_fiat_currency","updateMt5LoginList","account_switcher","withRouter","connect","client","common","ui","residence","is_populating_mt5_account_list","logout","toggleShouldShowRealAccountsList","AccountSwitcherMobile","disableApp","enableApp","is_upgrade_enabled","toggle","is_open","is_vertical_top","has_close_icon","toggleModal","width","any","onClose","visible","wrapperClassName","AccountInfoWrapper","disabled_message","alignment","message","zIndex","AccountInfoIcon","AccountInfo","acc_switcher_disabled_message","is_dialog_on","toggleDialog","currency_lower","toLowerCase","CSSTransition","in","timeout","enter","enterDone","exit","unmountOnExit"],"mappings":"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","file":"js/core.account-info.39c85726a9415f83dd9a.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Money, Button, Text } from '@deriv/components';\nimport { formatMoney, getCurrencyName, getMT5AccountDisplay, getCurrencyDisplayCode } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\nconst AccountList = ({\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    has_reset_balance,\n    is_disabled,\n    is_virtual,\n    loginid,\n    market_type,\n    onClickAccount,\n    onClickResetVirtualBalance,\n    selected_loginid,\n    sub_account_type,\n}) => {\n    if (is_disabled && !currency) return null;\n    const currency_badge = currency ? currency_icon : 'IcCurrencyUnknown';\n\n    return (\n        <>\n            <div\n                id={`dt_${loginid}`}\n                className={classNames('acc-switcher__account', {\n                    'acc-switcher__account--selected': loginid === selected_loginid,\n                    'acc-switcher__account--disabled': is_disabled,\n                })}\n                onClick={is_disabled ? undefined : onClickAccount}\n            >\n                <span className='acc-switcher__id'>\n                    <Icon\n                        icon={is_virtual ? 'IcCurrencyVirtual' : currency_badge}\n                        className={'acc-switcher__id-icon'}\n                        size={24}\n                    />\n                    <span>\n                        {display_type === 'currency' ? (\n                            <CurrencyDisplay is_virtual={is_virtual} currency={currency} />\n                        ) : (\n                            <AccountDisplay market_type={market_type} sub_account_type={sub_account_type} />\n                        )}\n                        <div className='acc-switcher__loginid-text'>{loginid}</div>\n                    </span>\n                    {has_reset_balance ? (\n                        <Button\n                            is_disabled={is_disabled}\n                            onClick={e => {\n                                e.stopPropagation();\n                                onClickResetVirtualBalance();\n                            }}\n                            className='acc-switcher__reset-account-btn'\n                            secondary\n                            small\n                        >\n                            {localize('Reset balance')}\n                        </Button>\n                    ) : (\n                        has_balance && (\n                            <Text\n                                size='xs'\n                                color='prominent'\n                                styles={{ fontWeight: 'inherit' }}\n                                className='acc-switcher__balance'\n                            >\n                                {currency && (\n                                    <Money\n                                        currency={getCurrencyDisplayCode(currency)}\n                                        amount={formatMoney(currency, balance, true)}\n                                        should_format={false}\n                                        show_currency\n                                    />\n                                )}\n                            </Text>\n                        )\n                    )}\n                </span>\n            </div>\n        </>\n    );\n};\n\nconst CurrencyDisplay = ({ currency, is_virtual }) => {\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n    if (!currency) {\n        return <Localize i18n_default_text='No currency assigned' />;\n    }\n    return getCurrencyName(currency);\n};\n\nconst AccountDisplay = ({ market_type, sub_account_type }) => (\n    <div>{getMT5AccountDisplay(market_type, sub_account_type)}</div>\n);\n\nexport default AccountList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ContentExpander } from '@deriv/components';\n\nconst AccountWrapper = ({ children, header, is_visible, toggleVisibility }) => (\n    <ContentExpander\n        className='acc-switcher'\n        title={header}\n        is_expanded={is_visible}\n        onToggle={toggleVisibility}\n        is_title_spaced\n    >\n        {children}\n    </ContentExpander>\n);\n\nAccountWrapper.propTypes = {\n    children: PropTypes.node,\n    header: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    is_visible: PropTypes.bool,\n    toggleVisibility: PropTypes.func,\n};\n\nexport default AccountWrapper;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport {\n    Button,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Icon,\n    Money,\n    Tabs,\n    ThemedScrollbars,\n    Text,\n    useOnClickOutside,\n} from '@deriv/components';\nimport {\n    routes,\n    isCryptocurrency,\n    formatMoney,\n    getMT5Account,\n    getMT5AccountDisplay,\n    getMT5AccountKey,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { getAccountTitle } from 'App/Containers/RealAccountSignup/helpers/constants';\nimport { connect } from 'Stores/connect';\nimport { AccountsItemLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport AccountList from './account-switcher-account-list.jsx';\nimport AccountWrapper from './account-switcher-account-wrapper.jsx';\n\nconst AccountSwitcher = props => {\n    const [active_tab_index, setActiveTabIndex] = React.useState(\n        !props.is_virtual || props.should_show_real_accounts_list ? 0 : 1\n    );\n    const [is_deriv_demo_visible, setDerivDemoVisible] = React.useState(true);\n    const [is_deriv_real_visible, setDerivRealVisible] = React.useState(true);\n    const [is_dmt5_demo_visible, setDmt5DemoVisible] = React.useState(true);\n    const [is_dmt5_real_visible, setDmt5RealVisible] = React.useState(true);\n\n    const wrapper_ref = React.useRef();\n\n    const toggleVisibility = section => {\n        switch (section) {\n            case 'demo_deriv':\n                return setDerivDemoVisible(!is_deriv_demo_visible);\n            case 'demo_dmt5':\n                return setDmt5DemoVisible(!is_dmt5_demo_visible);\n            case 'real_deriv':\n                return setDerivRealVisible(!is_deriv_real_visible);\n            case 'real_dmt5':\n                return setDmt5RealVisible(!is_dmt5_real_visible);\n            default:\n                return false;\n        }\n    };\n\n    const handleLogout = () => {\n        closeAccountsDialog();\n        if (props.is_positions_drawer_on) {\n            props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        props.logoutClient().then(() => {\n            props.routeBackInApp(props.history);\n        });\n    };\n\n    const closeAccountsDialog = () => {\n        props.toggleAccountsDialog(false);\n    };\n\n    const validateClickOutside = event => props.is_visible && !event.target.classList.contains('acc-info');\n\n    useOnClickOutside(wrapper_ref, closeAccountsDialog, validateClickOutside);\n\n    const redirectToMt5 = account_type => {\n        closeAccountsDialog();\n        props.history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    const hasRequiredCredentials = () => {\n        // for MT5 Real Financial STP, if true, users can instantly create a new account by setting password\n        if (!props.account_settings) return false;\n        const { citizen, tax_identification_number, tax_residence } = props.account_settings;\n        return !!(citizen && tax_identification_number && tax_residence);\n    };\n\n    const should_redirect_fstp_password = props.is_fully_authenticated && hasRequiredCredentials();\n\n    const openMt5RealAccount = account_type => {\n        const has_required_account =\n            account_type === 'synthetic' ? props.has_malta_account : props.has_maltainvest_account;\n\n        if (props.is_eu && !has_required_account) {\n            closeAccountsDialog();\n            props.openAccountNeededModal(\n                account_type === 'synthetic' ? props.standpoint.gaming_company : props.standpoint.financial_company,\n                account_type === 'synthetic' ? localize('Deriv Synthetic') : localize('Deriv Financial'),\n                account_type === 'synthetic' ? localize('DMT5 Synthetic') : localize('DMT5 Financial')\n            );\n        } else {\n            if (should_redirect_fstp_password)\n                sessionStorage.setItem('open_mt5_account_type', `real.${account_type}.set_password`);\n            else sessionStorage.setItem('open_mt5_account_type', `real.${account_type}`);\n            redirectToMt5Real();\n        }\n    };\n\n    const redirectToMt5Real = () => {\n        redirectToMt5('real');\n    };\n\n    const openMt5DemoAccount = account_type => {\n        sessionStorage.setItem('open_mt5_account_type', `demo.${account_type}`);\n        redirectToMt5Demo();\n    };\n\n    const redirectToMt5Demo = () => {\n        redirectToMt5('demo');\n    };\n\n    const setAccountCurrency = () => {\n        closeAccountsDialog();\n        props.toggleSetCurrencyModal();\n    };\n\n    const showAccountTypesModal = () => {\n        closeAccountsDialog();\n        props.toggleAccountTypesModal(true);\n    };\n\n    const isDemo = account => account.account_type === 'demo';\n\n    // * mt5_login_list returns these:\n    // landing_company_short: \"svg\" | \"malta\" | \"maltainvest\" |  \"vanuatu\"  | \"labuan\" | \"bvi\"\n    // account_type: \"real\" | \"demo\"\n    // market_type: \"financial\" | \"gaming\"\n    // sub_account_type: \"financial\" | \"financial_stp\" | \"swap_free\"\n    //\n    // (all market type gaming are synthetic accounts and can only have financial or swap_free sub account)\n    //\n    // * we should map them to landing_company:\n    // mt_financial_company: { financial: {}, financial_stp: {}, swap_free: {} }\n    // mt_gaming_company: { financial: {}, swap_free: {} }\n    const getRemainingAccounts = existing_mt5_accounts => {\n        const gaming_config = getMtConfig('gaming', props.landing_companies?.mt_gaming_company, existing_mt5_accounts);\n        const financial_config = getMtConfig(\n            'financial',\n            props.landing_companies?.mt_financial_company,\n            existing_mt5_accounts\n        );\n\n        return [...gaming_config, ...financial_config];\n    };\n\n    const getMtConfig = (market_type, landing_company, existing_mt5_accounts) => {\n        const mt5_config = [];\n        if (landing_company) {\n            Object.keys(landing_company).forEach(company => {\n                const has_account = existing_mt5_accounts.find(\n                    account => account.sub_account_type === company && account.market_type === market_type\n                );\n                if (!has_account) {\n                    const type = getMT5AccountKey(market_type, company);\n                    if (type) {\n                        mt5_config.push({\n                            icon: getMT5Account(market_type, company),\n                            title: getMT5AccountDisplay(market_type, company),\n                            type,\n                        });\n                    }\n                }\n            });\n        }\n        return mt5_config;\n    };\n\n    const doSwitch = async loginid => {\n        closeAccountsDialog();\n        if (props.account_loginid === loginid) return;\n        await props.switchAccount(loginid);\n    };\n\n    const resetBalance = async () => {\n        closeAccountsDialog();\n        props.resetVirtualBalance();\n    };\n\n    // Real accounts is always the first tab index based on design\n    const isRealAccountTab = active_tab_index === 0;\n\n    const getSortedAccountList = () => {\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        return props.account_list.slice().sort((a, b) => {\n            const a_currency = props.accounts[a.loginid].currency;\n            const b_currency = props.accounts[b.loginid].currency;\n            const a_is_crypto = isCryptocurrency(a_currency);\n            const b_is_crypto = isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n    };\n\n    const getSortedMT5List = () => {\n        // for MT5, synthetic, financial, financial stp\n        return props.mt5_login_list.slice().sort((a, b) => {\n            const a_is_demo = isDemo(a);\n            const b_is_demo = isDemo(b);\n\n            if (a_is_demo && !b_is_demo) {\n                return 1;\n            }\n            if (b_is_demo && !a_is_demo) {\n                return -1;\n            }\n            if (a.market_type === 'gaming') {\n                return -1;\n            }\n            if (a.sub_account_type === 'financial') {\n                return b.market_type === 'gaming' ? 1 : -1;\n            }\n            return 1;\n        });\n    };\n\n    const getDemoMT5 = () => {\n        return getSortedMT5List().filter(isDemo);\n    };\n\n    const getRemainingDemoMT5 = () => {\n        return getRemainingAccounts(getDemoMT5());\n    };\n\n    const getRealMT5 = () => {\n        return getSortedMT5List().filter(account => !isDemo(account));\n    };\n\n    const getRemainingRealMT5 = () => {\n        return getRemainingAccounts(getRealMT5());\n    };\n\n    // SVG clients can't upgrade.\n    const getRemainingRealAccounts = () => {\n        return canOpenMulti() ? [] : props.upgradeable_landing_companies;\n    };\n\n    const hasSetCurrency = () => {\n        return props.account_list.filter(account => !account.is_virtual).some(account => account.title !== 'Real');\n    };\n\n    const canUpgrade = () => {\n        return !!(props.is_virtual && props.can_upgrade_to);\n    };\n\n    const canOpenMulti = () => {\n        if (props.is_eu) return false;\n        if (props.available_crypto_currencies.length < 1 && !props.has_fiat) return true;\n        return !props.is_virtual;\n    };\n\n    const getTotalDemoAssets = () => {\n        const vrtc_loginid = props.account_list.find(account => account.is_virtual).loginid;\n        const vrtc_balance = props.accounts[vrtc_loginid] ? props.accounts[vrtc_loginid].balance : 0;\n        const mt5_demo_total = props.mt5_login_list\n            .filter(account => isDemo(account))\n            .reduce(\n                (total, account) => {\n                    total.balance += account.balance;\n                    return total;\n                },\n                { balance: 0 }\n            );\n        return Array.isArray(props.mt5_login_list) ? mt5_demo_total.balance + vrtc_balance : vrtc_balance;\n    };\n\n    const getTotalRealAssets = () => {\n        return props.obj_total_balance.amount_real + props.obj_total_balance.amount_mt5;\n    };\n\n    if (!props.is_logged_in) return false;\n\n    const total_assets_message_demo = props.is_mt5_allowed\n        ? localize('Total assets in your Deriv and DMT5 demo accounts.')\n        : localize('Total assets in your Deriv demo accounts.');\n\n    const total_assets_message_real = props.is_mt5_allowed\n        ? localize('Total assets in your Deriv and DMT5 real accounts.')\n        : localize('Total assets in your Deriv real accounts.');\n\n    const total_assets_message = isRealAccountTab ? total_assets_message_real : total_assets_message_demo;\n\n    const demo_accounts = (\n        <div className='acc-switcher__list-wrapper'>\n            <AccountWrapper\n                header={localize('Deriv Accounts')}\n                is_visible={is_deriv_demo_visible}\n                toggleVisibility={() => {\n                    toggleVisibility('demo_deriv');\n                }}\n            >\n                <div className='acc-switcher__accounts'>\n                    {getSortedAccountList()\n                        .filter(account => account.is_virtual)\n                        .map(account => (\n                            <AccountList\n                                key={account.loginid}\n                                balance={props.accounts[account.loginid].balance}\n                                currency={props.accounts[account.loginid].currency}\n                                currency_icon={`IcCurrency-${account.icon}`}\n                                display_type={'currency'}\n                                has_balance={'balance' in props.accounts[account.loginid]}\n                                has_reset_balance={props.accounts[props.account_loginid].is_virtual}\n                                is_disabled={account.is_disabled}\n                                is_virtual={account.is_virtual}\n                                loginid={account.loginid}\n                                onClickAccount={account.is_disabled ? undefined : () => doSwitch(account.loginid)}\n                                onClickResetVirtualBalance={resetBalance}\n                                selected_loginid={props.account_loginid}\n                            />\n                        ))}\n                </div>\n            </AccountWrapper>\n            {props.is_mt5_allowed && (\n                <React.Fragment>\n                    <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                    <AccountWrapper\n                        header={localize('DMT5 Accounts')}\n                        is_visible={is_dmt5_demo_visible}\n                        toggleVisibility={() => {\n                            toggleVisibility('demo_dmt5');\n                        }}\n                    >\n                        {props.is_loading_mt5 ? (\n                            <div className='acc-switcher__accounts--is-loading'>\n                                <AccountsItemLoader speed={3} />\n                            </div>\n                        ) : (\n                            <React.Fragment>\n                                {!!getDemoMT5().length && (\n                                    <div className='acc-switcher__accounts'>\n                                        {getDemoMT5().map(account => (\n                                            <AccountList\n                                                key={account.login}\n                                                market_type={account.market_type}\n                                                sub_account_type={account.sub_account_type}\n                                                balance={account.balance}\n                                                currency={account.currency}\n                                                currency_icon={`IcMt5-${getMT5Account(\n                                                    account.market_type,\n                                                    account.sub_account_type\n                                                )}`}\n                                                has_balance={'balance' in account}\n                                                loginid={account.display_login}\n                                                onClickAccount={redirectToMt5Demo}\n                                            />\n                                        ))}\n                                    </div>\n                                )}\n                                {getRemainingDemoMT5().map(account => (\n                                    <div key={account.title} className='acc-switcher__new-account'>\n                                        <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                        <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                            {account.title}\n                                        </Text>\n                                        <Button\n                                            onClick={() => openMt5DemoAccount(account.type)}\n                                            className='acc-switcher__new-account-btn'\n                                            secondary\n                                            small\n                                        >\n                                            {localize('Add')}\n                                        </Button>\n                                    </div>\n                                ))}\n                            </React.Fragment>\n                        )}\n                    </AccountWrapper>\n                </React.Fragment>\n            )}\n        </div>\n    );\n\n    const real_accounts = (\n        <div className='acc-switcher__list-wrapper'>\n            <React.Fragment>\n                <AccountWrapper\n                    header={localize('Deriv Accounts')}\n                    is_visible={is_deriv_real_visible}\n                    toggleVisibility={() => {\n                        toggleVisibility('real_deriv');\n                    }}\n                >\n                    <div className='acc-switcher__accounts'>\n                        {getSortedAccountList()\n                            .filter(account => !account.is_virtual)\n                            .map(account => {\n                                return (\n                                    <AccountList\n                                        key={account.loginid}\n                                        balance={props.accounts[account.loginid].balance}\n                                        currency={props.accounts[account.loginid].currency}\n                                        currency_icon={`IcCurrency-${account.icon}`}\n                                        display_type={'currency'}\n                                        has_balance={'balance' in props.accounts[account.loginid]}\n                                        is_disabled={account.is_disabled}\n                                        is_virtual={account.is_virtual}\n                                        is_eu={props.is_eu}\n                                        loginid={account.loginid}\n                                        onClickAccount={\n                                            account.is_disabled ? undefined : () => doSwitch(account.loginid)\n                                        }\n                                        selected_loginid={props.account_loginid}\n                                    />\n                                );\n                            })}\n                    </div>\n                    {getRemainingRealAccounts().map((account, index) => (\n                        <div key={index} className='acc-switcher__new-account'>\n                            <Icon icon='IcDeriv' size={24} />\n                            <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                {getAccountTitle(account, {\n                                    account_residence: props.client_residence,\n                                })}\n                            </Text>\n                            <Button\n                                onClick={() => {\n                                    props.openRealAccountSignup(account);\n                                }}\n                                className='acc-switcher__new-account-btn'\n                                secondary\n                                small\n                            >\n                                {localize('Add')}\n                            </Button>\n                        </div>\n                    ))}\n                    {!canUpgrade() && canOpenMulti() && (\n                        <Button\n                            className='acc-switcher__btn'\n                            secondary\n                            onClick={\n                                hasSetCurrency() ? () => props.openRealAccountSignup('manage') : setAccountCurrency\n                            }\n                        >\n                            {props.has_fiat && props.available_crypto_currencies?.length === 0\n                                ? localize('Manage account')\n                                : localize('Add or manage account')}\n                        </Button>\n                    )}\n                </AccountWrapper>\n            </React.Fragment>\n            {props.is_mt5_allowed && (\n                <React.Fragment>\n                    <div className='acc-switcher__separator acc-switcher__separator--no-padding' />\n                    <AccountWrapper\n                        header={localize('DMT5 Accounts')}\n                        is_visible={is_dmt5_real_visible}\n                        toggleVisibility={() => {\n                            toggleVisibility('real_dmt5');\n                        }}\n                    >\n                        {props.is_loading_mt5 ? (\n                            <div className='acc-switcher__accounts--is-loading'>\n                                <AccountsItemLoader speed={3} />\n                            </div>\n                        ) : (\n                            <React.Fragment>\n                                {!!getRealMT5().length && (\n                                    <div className='acc-switcher__accounts'>\n                                        {getRealMT5().map(account => (\n                                            <AccountList\n                                                key={account.login}\n                                                market_type={account.market_type}\n                                                sub_account_type={account.sub_account_type}\n                                                balance={account.balance}\n                                                currency={account.currency}\n                                                currency_icon={`IcMt5-${getMT5Account(\n                                                    account.market_type,\n                                                    account.sub_account_type\n                                                )}`}\n                                                has_balance={'balance' in account}\n                                                loginid={account.display_login}\n                                                onClickAccount={redirectToMt5Real}\n                                            />\n                                        ))}\n                                    </div>\n                                )}\n                                {getRemainingRealMT5().map(account => (\n                                    <div\n                                        key={account.title}\n                                        className={classNames('acc-switcher__new-account', {\n                                            'acc-switcher__new-account--disabled': props.mt5_login_list_error,\n                                        })}\n                                    >\n                                        <Icon icon={`IcMt5-${account.icon}`} size={24} />\n                                        <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                            {account.title}\n                                        </Text>\n                                        <Button\n                                            onClick={() => openMt5RealAccount(account.type)}\n                                            className='acc-switcher__new-account-btn'\n                                            secondary\n                                            small\n                                            is_disabled={\n                                                !props.has_active_real_account ||\n                                                (account.type === 'financial_stp' &&\n                                                    (props.is_pending_authentication || !!props.mt5_login_list_error))\n                                            }\n                                        >\n                                            {localize('Add')}\n                                        </Button>\n                                    </div>\n                                ))}\n                            </React.Fragment>\n                        )}\n                    </AccountWrapper>\n                </React.Fragment>\n            )}\n        </div>\n    );\n\n    return (\n        <div className='acc-switcher__list' ref={wrapper_ref}>\n            <Tabs\n                active_index={active_tab_index}\n                className='acc-switcher__list-tabs'\n                onTabItemClick={index => setActiveTabIndex(index)}\n                top\n            >\n                {/* TODO: De-couple and refactor demo and real accounts groups\n                        into a single reusable AccountListItem component */}\n                <div label={localize('Real')}>\n                    <DesktopWrapper>\n                        <ThemedScrollbars height='354px'>{real_accounts}</ThemedScrollbars>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                            {real_accounts}\n                        </Div100vhContainer>\n                    </MobileWrapper>\n                </div>\n                <div label={localize('Demo')}>\n                    <DesktopWrapper>\n                        <ThemedScrollbars height='354px'>{demo_accounts}</ThemedScrollbars>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <Div100vhContainer className='acc-switcher__list-container' max_autoheight_offset='234px'>\n                            {demo_accounts}\n                        </Div100vhContainer>\n                    </MobileWrapper>\n                </div>\n            </Tabs>\n            <div\n                className={classNames('acc-switcher__separator', {\n                    'acc-switcher__separator--auto-margin': props.is_mobile,\n                })}\n            />\n            <div className='acc-switcher__total'>\n                <Text line_height='s' size='xs' weight='bold' color='prominent'>\n                    <Localize i18n_default_text='Total assets' />\n                </Text>\n                <Text size='xs' color='prominent' className='acc-switcher__balance'>\n                    <Money\n                        currency={isRealAccountTab ? props.obj_total_balance.currency : 'USD'}\n                        amount={formatMoney(\n                            isRealAccountTab ? props.obj_total_balance.currency : 'USD',\n                            isRealAccountTab ? getTotalRealAssets() : getTotalDemoAssets(),\n                            true\n                        )}\n                        show_currency\n                        should_format={false}\n                    />\n                </Text>\n            </div>\n            <Text color='less-prominent' line_height='xs' size='xxxs' className='acc-switcher__total-subtitle'>\n                {total_assets_message}\n            </Text>\n            <div className='acc-switcher__separator' />\n            <div className='acc-switcher__footer'>\n                {props.is_uk && props.has_any_real_account && (\n                    <Button\n                        className='acc-switcher__compare'\n                        type='button'\n                        has_effect\n                        onClick={showAccountTypesModal}\n                        text={localize('Compare')}\n                        secondary\n                    />\n                )}\n                <div id='dt_logout_button' className='acc-switcher__logout' onClick={handleLogout}>\n                    <Text color='prominent' size='xs' align='left' className='acc-switcher__logout-text'>\n                        {localize('Log out')}\n                    </Text>\n                    <Icon icon='IcLogout' className='acc-switcher__logout-icon drawer__icon' onClick={handleLogout} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nAccountSwitcher.propTypes = {\n    available_crypto_currencies: PropTypes.array,\n    account_list: PropTypes.array,\n    account_loginid: PropTypes.string,\n    accounts: PropTypes.object,\n    can_change_fiat_currency: PropTypes.bool,\n    can_upgrade_to: PropTypes.string,\n    has_fiat: PropTypes.bool,\n    has_any_real_account: PropTypes.bool,\n    has_active_real_account: PropTypes.bool,\n    is_eu: PropTypes.bool,\n    is_fully_authenticated: PropTypes.bool,\n    is_loading_mt5: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_mt5_allowed: PropTypes.bool,\n    is_pending_authentication: PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_uk: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    mt5_login_list: PropTypes.array,\n    obj_total_balance: PropTypes.object,\n    openRealAccountSignup: PropTypes.func,\n    switchAccount: PropTypes.func,\n    resetVirtualBalance: PropTypes.func,\n    toggleAccountsDialog: PropTypes.func,\n    toggleAccountTypesModal: PropTypes.func,\n    togglePositionsDrawer: PropTypes.func,\n    toggleSetCurrencyModal: PropTypes.func,\n    updateMt5LoginList: PropTypes.func,\n};\n\nconst account_switcher = withRouter(\n    connect(({ client, common, ui }) => ({\n        available_crypto_currencies: client.available_crypto_currencies,\n        account_loginid: client.loginid,\n        accounts: client.accounts,\n        account_settings: client.account_settings,\n        can_change_fiat_currency: client.can_change_fiat_currency,\n        account_list: client.account_list,\n        can_upgrade_to: client.can_upgrade_to,\n        client_residence: client.residence,\n        is_eu: client.is_eu,\n        is_fully_authenticated: client.is_fully_authenticated,\n        is_loading_mt5: client.is_populating_mt5_account_list,\n        is_logged_in: client.is_logged_in,\n        is_mt5_allowed: client.is_mt5_allowed,\n        is_pending_authentication: client.is_pending_authentication,\n        is_uk: client.is_uk,\n        is_virtual: client.is_virtual,\n        has_fiat: client.has_fiat,\n        has_any_real_account: client.has_any_real_account,\n        mt5_login_list: client.mt5_login_list,\n        mt5_login_list_error: client.mt5_login_list_error,\n        obj_total_balance: client.obj_total_balance,\n        switchAccount: client.switchAccount,\n        resetVirtualBalance: client.resetVirtualBalance,\n        has_malta_account: client.has_malta_account,\n        has_maltainvest_account: client.has_maltainvest_account,\n        has_active_real_account: client.has_active_real_account,\n        openAccountNeededModal: ui.openAccountNeededModal,\n        logoutClient: client.logout,\n        landing_companies: client.landing_companies,\n        upgradeable_landing_companies: client.upgradeable_landing_companies,\n        updateMt5LoginList: client.updateMt5LoginList,\n        routeBackInApp: common.routeBackInApp,\n        standpoint: client.standpoint,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        toggleAccountsDialog: ui.toggleAccountsDialog,\n        toggleAccountTypesModal: ui.toggleAccountTypesModal,\n        togglePositionsDrawer: ui.togglePositionsDrawer,\n        toggleSetCurrencyModal: ui.toggleSetCurrencyModal,\n        should_show_real_accounts_list: ui.should_show_real_accounts_list,\n        toggleShouldShowRealAccountsList: ui.toggleShouldShowRealAccountsList,\n    }))(AccountSwitcher)\n);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Div100vhContainer, Modal } from '@deriv/components';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountSwitcherMobile = props => {\n    const { disableApp, enableApp, is_visible, is_upgrade_enabled, toggle } = props;\n    return (\n        <Modal\n            id='dt_account_switcher_modal'\n            className='accounts-switcher'\n            enableApp={enableApp}\n            is_open={is_visible}\n            is_vertical_top\n            disableApp={disableApp}\n            has_close_icon={false}\n            toggleModal={toggle}\n            height='auto'\n            width='calc(100vw - 32px)'\n        >\n            <Div100vhContainer\n                className={classNames('acc-switcher__wrapper', 'acc-switcher__wrapper--is-mobile')}\n                max_autoheight_offset='48px'\n            >\n                <AccountSwitcher is_mobile is_visible={true} toggle={toggle} is_upgrade_enabled={is_upgrade_enabled} />\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nAccountSwitcherMobile.propTypes = {\n    children: PropTypes.any,\n    onClose: PropTypes.func,\n    title: PropTypes.string,\n    visible: PropTypes.bool,\n    wrapperClassName: PropTypes.string,\n};\n\nexport default AccountSwitcherMobile;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, Icon, MobileWrapper, Popover } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { getCurrencyDisplayCode } from '@deriv/shared';\nimport AccountSwitcherMobile from 'App/Containers/AccountSwitcher/account-switcher-mobile.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\n\nconst AccountInfoWrapper = ({ is_disabled, disabled_message, children }) =>\n    is_disabled && disabled_message ? (\n        <Popover alignment='bottom' message={disabled_message} zIndex={99999}>\n            {children}\n        </Popover>\n    ) : (\n        <React.Fragment>{children}</React.Fragment>\n    );\n\nconst AccountInfoIcon = ({ is_virtual, currency }) => (\n    <Icon\n        icon={`IcCurrency-${is_virtual ? 'virtual' : currency || 'Unknown'}`}\n        className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n        size={24}\n    />\n);\n\nconst AccountInfo = ({\n    acc_switcher_disabled_message,\n    balance,\n    currency,\n    disableApp,\n    enableApp,\n    is_dialog_on,\n    is_virtual,\n    toggleDialog,\n    is_disabled,\n}) => {\n    const currency_lower = currency.toLowerCase();\n    return (\n        <div className='acc-info__wrapper'>\n            <div className='acc-info__separator' />\n            <AccountInfoWrapper is_disabled={is_disabled} disabled_message={acc_switcher_disabled_message}>\n                <div\n                    className={classNames('acc-info', {\n                        'acc-info--show': is_dialog_on,\n                        'acc-info--is-virtual': is_virtual,\n                        'acc-info--is-disabled': is_disabled,\n                    })}\n                    onClick={is_disabled ? undefined : () => toggleDialog()}\n                >\n                    <span className='acc-info__id'>\n                        <DesktopWrapper>\n                            <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            {(is_virtual || currency) && (\n                                <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                            )}\n                        </MobileWrapper>\n                    </span>\n                    {(typeof balance !== 'undefined' || !currency) && (\n                        <p\n                            className={classNames('acc-info__balance', {\n                                'acc-info__balance--no-currency': !currency && !is_virtual,\n                            })}\n                        >\n                            {!currency ? (\n                                <Localize i18n_default_text='No currency assigned' />\n                            ) : (\n                                `${balance} ${getCurrencyDisplayCode(currency)}`\n                            )}\n                        </p>\n                    )}\n                    {is_disabled ? (\n                        <Icon icon='IcLock' />\n                    ) : (\n                        <Icon icon='IcChevronDownBold' className='acc-info__select-arrow' />\n                    )}\n                </div>\n            </AccountInfoWrapper>\n            <MobileWrapper>\n                <AccountSwitcherMobile\n                    is_visible={is_dialog_on}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    toggle={toggleDialog}\n                />\n            </MobileWrapper>\n            <DesktopWrapper>\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter: 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit: 'acc-switcher__wrapper--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper'>\n                        <AccountSwitcher is_visible={is_dialog_on} toggle={toggleDialog} />\n                    </div>\n                </CSSTransition>\n            </DesktopWrapper>\n        </div>\n    );\n};\n\nAccountInfo.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.string,\n    currency: PropTypes.string,\n    is_dialog_on: PropTypes.bool,\n    is_disabled: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    loginid: PropTypes.string,\n    toggleDialog: PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx","webpack:///./App/Containers/AccountSignupModal/account-signup-modal.jsx"],"names":["SetResidenceForm","class_prefix","children","header_text","errors","touched","setFieldTouched","setFieldValue","residence_list","className","localize","name","field","autoComplete","type","label","error","residence","required","list_items","onItemSelection","value","text","placeholder","use_text","onChange","e","target","propTypes","PropTypes","node","string","arrayOf","object","signupInitialValues","password","AccountSignup","enableApp","isModalVisible","is_account_signup_modal_visible","onSignup","context_type","React","PlatformContext","pw_input","setPWInput","has_valid_residence","setHasValidResidence","onResidenceSelection","onSignupComplete","Error","initialValues","validate","values","validLength","min","max","validPassword","getErrorMessages","min_number","max_number","index_of_selection","findIndex","item","toLowerCase","disabled","website_name","validateSignup","onSubmit","modded_values","is_deriv_crypto","isSubmitting","handleBlur","handleChange","as","weight","i18n_default_text","input","has_error","custom_feedback_messages","password_warnings","onBlur","new_password","size","classNames","is_disabled","primary","onClick","func","array","bool","AccountSignupModal","disableApp","is_loading","is_visible","is_logged_in","logout","toggleAccountSignupModal","length","is_mobile_full_width","is_content_centered","connect","ui","client"],"mappings":"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","file":"js/core.account-signup-modal.34b5671863938d461d4f.js","sourcesContent":["import { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Autocomplete, DesktopWrapper, MobileWrapper, SelectNative } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    class_prefix = 'set-residence',\n    children,\n    header_text,\n    errors,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => (\n    <div className={`${class_prefix}__residence-selection`}>\n        {!!header_text && <p className={`${class_prefix}__heading`}>{header_text}</p>}\n        <p className={`${class_prefix}__${header_text ? 'text' : 'heading'}`}>{localize('Where do you live?')}</p>\n        <Field name='residence'>\n            {({ field }) => (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            className={`${class_prefix}__residence-field`}\n                            type='text'\n                            label={localize('Choose country')}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => setFieldValue('residence', value ? text : '', true)}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <SelectNative\n                            placeholder={localize('Please select')}\n                            label={localize('Choose country')}\n                            value={field.value}\n                            list_items={residence_list}\n                            error={touched.residence && errors.residence}\n                            required\n                            use_text\n                            onChange={e => {\n                                setFieldTouched('residence', true);\n                                setFieldValue('residence', e.target.value, true);\n                            }}\n                        />\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n        </Field>\n        {children}\n    </div>\n);\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.node,\n    class_prefix: PropTypes.string,\n    header_text: PropTypes.string,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SetResidenceForm;\n","import classNames from 'classnames';\nimport { Field, Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Dialog, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport { validPassword, validLength, website_name, getErrorMessages, PlatformContext } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport ResidenceForm from '../SetResidenceModal/set-residence-form.jsx';\nimport 'Sass/app/modules/account-signup.scss';\n\nconst signupInitialValues = { password: '', residence: '' };\n\nconst validateSignup = (values, residence_list) => {\n    const errors = {};\n\n    if (\n        !validLength(values.password, {\n            min: 8,\n            max: 25,\n        })\n    ) {\n        errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n            min_number: 8,\n            max_number: 25,\n        });\n    } else if (!validPassword(values.password)) {\n        errors.password = getErrorMessages().password();\n    }\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    return errors;\n};\n\nconst AccountSignup = ({ enableApp, isModalVisible, is_account_signup_modal_visible, onSignup, residence_list }) => {\n    const context_type = React.useContext(PlatformContext);\n\n    const [pw_input, setPWInput] = React.useState('');\n    const [has_valid_residence, setHasValidResidence] = React.useState(false);\n\n    const updatePassword = new_password => {\n        setPWInput(new_password);\n    };\n\n    const onResidenceSelection = () => {\n        setHasValidResidence(true);\n    };\n\n    const onSignupComplete = error => {\n        // Handle lower level modal controls due to overriding modal rendering\n        isModalVisible(false);\n        enableApp();\n\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error) {\n            throw Error(error);\n        }\n    };\n\n    const validateSignupPassthrough = values => validateSignup(values, residence_list);\n    const onSignupPassthrough = values => {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        const modded_values = {\n            ...values,\n            residence: residence_list[index_of_selection].value,\n            is_deriv_crypto: context_type.is_deriv_crypto,\n            is_account_signup_modal_visible,\n        };\n        onSignup(modded_values, onSignupComplete);\n    };\n\n    return (\n        <div className='account-signup'>\n            <Formik\n                initialValues={signupInitialValues}\n                validate={validateSignupPassthrough}\n                onSubmit={onSignupPassthrough}\n            >\n                {({\n                    isSubmitting,\n                    handleBlur,\n                    errors,\n                    handleChange,\n                    values,\n                    setFieldValue,\n                    setFieldTouched,\n                    touched,\n                }) => (\n                    <Form>\n                        {!has_valid_residence ? (\n                            <ResidenceForm\n                                header_text={localize('Thanks for verifying your email')}\n                                class_prefix='account-signup'\n                                errors={errors}\n                                touched={touched}\n                                setFieldTouched={setFieldTouched}\n                                setFieldValue={setFieldValue}\n                                residence_list={residence_list}\n                            >\n                                <Button\n                                    className={classNames('account-signup__btn', {\n                                        'account-signup__btn--disabled': !values.residence || errors.residence,\n                                    })}\n                                    type='button'\n                                    is_disabled={!values.residence || !!errors.residence}\n                                    onClick={onResidenceSelection}\n                                    primary\n                                    text={localize('Next')}\n                                />\n                            </ResidenceForm>\n                        ) : (\n                            <div className='account-signup__password-selection'>\n                                <Text as='p' weight='bold' className='account-signup__heading'>\n                                    <Localize i18n_default_text='Keep your account secure with a password' />\n                                </Text>\n                                <Field name='password'>\n                                    {({ field }) => (\n                                        <PasswordMeter\n                                            input={pw_input}\n                                            has_error={!!(touched.password && errors.password)}\n                                            custom_feedback_messages={getErrorMessages().password_warnings}\n                                        >\n                                            <PasswordInput\n                                                {...field}\n                                                className='account-signup__password-field'\n                                                label={localize('Create a password')}\n                                                error={touched.password && errors.password}\n                                                required\n                                                value={values.password}\n                                                onBlur={handleBlur}\n                                                onChange={e => {\n                                                    const input = e.target;\n                                                    setFieldTouched('password', true);\n                                                    if (input) updatePassword(input.value);\n                                                    handleChange(e);\n                                                }}\n                                            />\n                                        </PasswordMeter>\n                                    )}\n                                </Field>\n                                <Text as='p' size='xxs' className='account-signup__subtext'>\n                                    <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                </Text>\n\n                                <Button\n                                    className={classNames('account-signup__btn', {\n                                        'account-signup__btn--disabled':\n                                            !values.password || errors.password || isSubmitting,\n                                    })}\n                                    type='submit'\n                                    is_disabled={!values.password || !!errors.password || isSubmitting}\n                                    text={localize('Start trading')}\n                                    primary\n                                />\n                            </div>\n                        )}\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nAccountSignup.propTypes = {\n    enableApp: PropTypes.func,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.array,\n    isModalVisible: PropTypes.func,\n    is_account_signup_modal_visible: PropTypes.bool,\n};\n\nconst AccountSignupModal = ({\n    enableApp,\n    disableApp,\n    is_loading,\n    is_visible,\n    is_logged_in,\n    logout,\n    onSignup,\n    residence_list,\n    toggleAccountSignupModal,\n}) => {\n    React.useEffect(() => {\n        // a logged in user should not be able to create a new account\n        if (is_visible && is_logged_in) {\n            logout();\n        }\n    }, [is_visible, is_logged_in, logout]);\n\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_mobile_full_width={false}\n            is_content_centered\n        >\n            <AccountSignup\n                onSignup={onSignup}\n                residence_list={residence_list}\n                isModalVisible={toggleAccountSignupModal}\n                enableApp={enableApp}\n                is_account_signup_modal_visible={is_visible}\n            />\n        </Dialog>\n    );\n};\n\nAccountSignupModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_account_signup_modal_visible,\n    toggleAccountSignupModal: ui.toggleAccountSignupModal,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    onSignup: client.onSignup,\n    is_logged_in: client.is_logged_in,\n    residence_list: client.residence_list,\n    logout: client.logout,\n}))(AccountSignupModal);\n"],"sourceRoot":""}
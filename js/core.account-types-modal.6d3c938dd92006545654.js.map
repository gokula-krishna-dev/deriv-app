{"version":3,"sources":["webpack:///./App/Containers/AccountTypesModal/account-card.jsx","webpack:///./App/Containers/AccountTypesModal/account-types-modal.jsx"],"names":["MainCard","button_text","buttonOnClick","platforms","is_button_disabled","items","subtitle","title","className","Object","keys","length","entries","map","index","label","value","key","as","color","size","localize","platform","href","path","target","rel","icon","name","text","is_disabled","onClick","has_effect","primary","AccountCard","classNames","propTypes","PropTypes","string","func","object","arrayOf","getTargetLoginid","accounts","target_landing_company_shortcode","reduce","acc","loginid","landing_company_shortcode","Box","description","footer_text","icons","cards","line_height","weight","array","FinancialBox","derivOnClick","is_deriv_crypto","mt5OnClick","has_maltainvest_account","add_account_label","getStaticUrl","SyntheticBox","AccountTypesModal","has_iom_account","history","is_account_types_modal_visible","is_dismissible","openRealAccountSignup","standpoint","switchAccount","toggleAccountTypesModal","context_type","React","PlatformContext","closeModal","createRealAccount","width","is_open","toggleModal","has_close_icon","is_bypassed","isMobile","autohide","height","height_offset","isDesktop","gaming_company","financial_company","account_type","push","routes","mt5","bool","any","withRouter","connect","ui","client","can_upgrade","can_upgrade_to","should_have_real_account"],"mappings":"gtCAOA,IAAMA,EAAW,SAAC,GAA0F,IAAxFC,EAAwF,EAAxFA,YAAaC,EAA2E,EAA3EA,cAAeC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,mBAAoBC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC5F,OACI,uBAAKC,UAAU,sBACX,sBAAIA,UAAU,4BAA4BD,GAC1C,sBAAIC,UAAU,+BAA+BF,GAC5CG,OAAOC,KAAKL,GAAOM,QAChB,uBAAKH,UAAU,sCACX,yBAAOA,UAAU,4BACb,6BACKC,OAAOG,QAAQP,GAAOQ,KAAI,WAAiBC,GAAU,aAAzBC,EAAyB,KAAlBC,EAAkB,KAClD,OACI,sBAAIC,IAAKH,EAAON,UAAU,2BACtB,sBAAIA,UAAU,iCAAiCO,GAC/C,sBAAIP,UAAU,iCAAiCQ,UAQ1Eb,GACG,uBAAKK,UAAU,2BACX,gBAAC,OAAD,CAAMU,GAAG,IAAIC,MAAM,iBAAiBC,KAAK,MAAMZ,UAAU,iCACpDa,mBAAS,iBAEd,uBAAKb,UAAU,iCACVL,EAAUU,KAAI,SAACS,EAAUR,GACtB,OACI,uBAAKG,IAAKH,EAAON,UAAU,gCACvB,qBAAGe,KAAMD,EAASE,KAAMC,OAAO,SAASC,IAAI,uBACxC,gBAAC,OAAD,CAAMC,KAAML,EAASK,KAAMP,KAAM,MAGrC,gBAAC,OAAD,CAAMF,GAAG,IAAIE,KAAK,OAAOZ,UAAU,gCAC9Bc,EAASM,YAQtC,gBAAC,SAAD,CACIpB,UAAU,4BACVqB,KAAM5B,EACN6B,YAAa1B,EACb2B,QAAS7B,EACT8B,YAAU,EACVC,SAAO,MAMjBC,EAAc,SAAC,GAA0F,IAAxFjC,EAAwF,EAAxFA,YAAaC,EAA2E,EAA3EA,cAAeG,EAA4D,EAA5DA,MAAOF,EAAqD,EAArDA,UAAWG,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,MAAOH,EAAyB,EAAzBA,mBAClF,OACI,uBAAKI,UAAU,gBACX,uBAAKA,UAAW2B,IAAW,0BACvB,gBAAC,EAAD,CACI9B,MAAOA,EACPC,SAAUA,EACVC,MAAOA,EACPH,mBAAoBA,EACpBD,UAAWA,EACXF,YAAaA,EACbC,cAAeA,OAOnCgC,EAAYE,UAAY,CACpBnC,YAAaoC,IAAUC,OACvBpC,cAAemC,IAAUE,KACzBlC,MAAOgC,IAAUG,OACjBrC,UAAWkC,IAAUI,QAAQJ,IAAUG,QACvClC,SAAU+B,IAAUC,OACpB/B,MAAO8B,IAAUC,QAGNJ,Q,+jCCrEf,IAAMQ,EAAmB,SAACC,EAAUC,GAAX,OACrBnC,OAAOG,QAAQ+B,GAAUE,QAAO,SAACC,EAAD,GAAmD,aAA5CC,EAA4C,KAK/E,OAL+E,KAAjCC,4BACZJ,IAE9BE,GAAOC,GAEJD,IACR,KAEDG,EAAM,SAAC,GAAsD,IAApD1C,EAAoD,EAApDA,MAAO2C,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACnD,OACI,uBAAK7C,UAAU,sBACX,uBAAKA,UAAU,2BACX,sBAAIA,UAAU,4BAA4BD,GAC1C,gBAAC,OAAD,CAAMW,GAAG,IAAIE,KAAK,KAAKkC,YAAY,IAAI9C,UAAU,kCAC5C0C,GAEJC,GACG,gBAAC,OAAD,CAAMjC,GAAG,IAAIE,KAAK,MAAMmC,OAAO,OAAO/C,UAAU,6BAC3C2C,GAGT,uBAAK3C,UAAU,4BACV4C,EAAMvC,KAAI,SAACc,EAAMb,GACd,OAAO,gBAAC,OAAD,CAAMN,UAAU,0BAA0BmB,KAAMA,EAAMV,IAAKH,SAI9E,gBAAC,gBAAD,KACI,gBAAC,iBAAD,KAAiBuC,IAErB,gBAAC,iBAAD,KAAiBA,KAK7BJ,EAAIb,UAAY,CACZ7B,MAAO8B,IAAUC,OACjBY,YAAab,IAAUC,OACvBa,YAAad,IAAUC,OACvBc,MAAOf,IAAUI,QAAQJ,IAAUC,QACnCe,MAAOhB,IAAUmB,OAGrB,IAAMC,EAAe,SAAC,GAA8F,QAA5FC,EAA4F,EAA5FA,aAAcC,EAA8E,EAA9EA,gBAAiBC,EAA6D,EAA7DA,WAAYC,EAAiD,EAAjDA,wBAAyBC,EAAwB,EAAxBA,kBACxF,OACI,gBAAC,EAAD,CACIvD,MAAOc,mBAAS,aAChB6B,YAAa7B,mBACT,wIAEJ8B,YAAa9B,mBAAS,qCACtB+B,MAAO,CAAC,wBAAyB,sBAAuB,wBAAyB,yBACjFC,MAAO,CACH,gBAAC,EAAD,CACIpC,IAAK,EACLV,MAAOc,mBAAS,iBAChBf,SAAUe,mBAAS,kCACnBpB,YAAa4D,EAA0BC,EAAkB,GAAKA,EAAkB,GAChF5D,cAAewD,EACfrD,OAAK,SACAgB,mBAAS,cAAgBA,mBAAS,gBADlC,IAEAA,mBAAS,aAAeA,mBAAS,aAFjC,IAGAA,mBAAS,eAAiBA,mBAAS,aAHnC,IAIAA,mBAAS,gBAAkBA,mBAAS,YAJpC,IAKAA,mBAAS,YAAcA,mBAAS,gBALhC,GAOLlB,UAAW,CACP,CACIwB,KAAM,iBACNC,KAAM,UACNJ,KAAMuC,uBAAa,WAAY,CAAEJ,qBAErC,CACIhC,KAAM,cACNC,KAAM,OACNJ,KAAMuC,uBAAa,QAAS,CAAEJ,qBAElC,CACIhC,KAAM,qBACNC,KAAM,cACNJ,KAAM,mDAId,qBAAGhB,UAAU,kCACRa,mBACG,kPAGR,qBAAGb,UAAU,yCAAyCa,mBAAS,wBAC/D,qBAAGb,UAAU,yCAAyCa,mBAAS,sBAEnE,gBAAC,EAAD,CACIJ,IAAK,EACLV,MAAOc,mBAAS,mBAChBf,SAAUe,mBAAS,iCACnBpB,YAAc4D,EAAiDC,EAAkB,GAAzCA,EAAkB,GAC1D5D,cAAe0D,EACfxD,oBAAqByD,EACrBxD,OAAK,SACAgB,mBAAS,YAAcA,mBAAS,eADhC,IAEAA,mBAAS,eAAiBA,mBAAS,SAFnC,IAGAA,mBAAS,kBAAoBA,mBAAS,QAHtC,IAIAA,mBAAS,YAAcA,mBAAS,YAJhC,GAMLlB,UAAW,CACP,CACIwB,KAAM,cACNC,KAAM,eACNJ,KAAMuC,uBAAa,QAAS,CAAEJ,uBAItC,qBAAGnD,UAAU,kCACRa,mBACG,+MAGR,qBAAGb,UAAU,yCAAyCa,mBAAS,uBAA/D,KACA,qBAAGb,UAAU,yCACRa,mBAAS,QADd,IACuB,iCAQrC2C,EAAe,SAAC,GAAyD,MAAvDN,EAAuD,EAAvDA,aAAcI,EAAyC,EAAzCA,kBAAmBH,EAAsB,EAAtBA,gBACrD,OACI,gBAAC,EAAD,CACIpD,MAAOc,mBAAS,aAChB6B,YAAa7B,mBACT,0HAEJ+B,MAAO,CACH,qBACA,qBACA,qBACA,qBACA,sBACA,mBACA,mBACA,mBACA,mBACA,oBACA,uBACA,sBACA,wBACA,uBACA,sBAEJC,MAAO,CACH,gBAAC,EAAD,CACIpC,IAAK,EACLV,MAAOc,mBAAS,iBAChBf,SAAUe,mBAAS,kCACnBpB,YAAa6D,EACb5D,cAAewD,EACfrD,OAAK,SACAgB,mBAAS,cAAgBA,mBAAS,QADlC,IAEAA,mBAAS,gBAAkBA,mBAAS,WAFpC,IAGAA,mBAAS,gBAAkBA,mBAAS,aAHpC,IAIAA,mBAAS,gBAAkBA,mBAAS,SAJpC,IAKAA,mBAAS,YAAcA,mBAAS,YALhC,GAOLlB,UAAW,CACP,CACIwB,KAAM,iBACNC,KAAM,UACNJ,KAAMuC,uBAAa,UAAW,CAAEJ,qBAEpC,CACIhC,KAAM,cACNC,KAAM,OACNJ,KAAMuC,uBAAa,OAAQ,CAAEJ,qBAEjC,CACIhC,KAAM,qBACNC,KAAM,cACNJ,KAAM,mCAId,qBAAGhB,UAAU,kCACRa,mBACG,kPAGR,qBAAGb,UAAU,yCAAyCa,mBAAS,wBAC/D,qBAAGb,UAAU,yCAAyCa,mBAAS,0BAO7E4C,EAAoB,SAAC,GAYrB,IAXFtB,EAWE,EAXFA,SACAuB,EAUE,EAVFA,gBACAL,EASE,EATFA,wBACAM,EAQE,EARFA,QACAC,EAOE,EAPFA,+BACAC,EAME,EANFA,eACArB,EAKE,EALFA,0BACAsB,EAIE,EAJFA,sBACAC,EAGE,EAHFA,WACAC,EAEE,EAFFA,cACAC,EACE,EADFA,wBAEMC,EAAeC,aAAiBC,mBAEhCC,EAAa,WACfJ,GAAwB,IAatBK,EAAoB,SAAArD,GACtBoD,IACAP,EAAsB7C,IAG1B,OACI,gBAAC,QAAD,CACIlB,MAAOc,mBAAS,iBAChB0D,MAAM,QACNvE,UAAU,gBACVwE,QAASZ,EACTa,YAAaJ,EACbK,eAAgBb,GAEhB,gBAAC,mBAAD,CAAkBc,YAAaC,qBAAYC,UAAU,EAAOC,OAAQ,qBAChE,gBAAC,oBAAD,CAAmBC,cAAc,QAAQzD,YAAa0D,sBAAahF,UAAU,4BACzE,uBAAKA,UAAU,iBACX,gBAAC,OAAD,CAAMU,GAAG,IAAIE,KAAK,KAAKkC,YAAY,IAAI9C,UAAU,wBAC5Ca,mBAAS,6CAEd,2BACI,gBAAC,EAAD,CACIqC,aAAc,WACNQ,GACkC,QAA9BlB,GACAwB,EAAc9B,EAAiBC,EAAU,QAE7CkC,KAEAC,EAAkBP,EAAWkB,iBAGrC3B,kBACII,EACM7C,mBAAS,2BACTA,mBAAS,yBAEnBsC,gBAAiBe,EAAaf,kBAElC,gBAAC,EAAD,CACID,aAAc,WACNG,GACkC,gBAA9Bb,GACAwB,EAAc9B,EAAiBC,EAAU,gBAE7CkC,KAEAC,EAAkBP,EAAWmB,oBAGrC9B,WAvDF,WALJ,IAAA+B,EAMlBd,IANkBc,EAOJ,OANdd,IACAV,EAAQyB,KAAR,UAAgBC,SAAOC,IAAvB,YAA8BH,KA2DN9B,wBAAyBA,EACzBC,kBAAmB,CACfzC,mBAAS,2BACTA,mBAAS,yBACTA,mBAAS,6BAEbsC,gBAAiBe,EAAaf,wBAU9DM,EAAkB7B,UAAY,CAC1BO,SAAUN,IAAUG,OACpB0B,gBAAiB7B,IAAU0D,KAC3BlC,wBAAyBxB,IAAU0D,KACnC5B,QAAS9B,IAAU2D,IACnB5B,+BAAgC/B,IAAU0D,KAC1C1B,eAAgBhC,IAAU0D,KAC1B/C,0BAA2BX,IAAUC,OACrCiC,WAAYlC,IAAUG,OACtBgC,cAAenC,IAAUE,KACzBkC,wBAAyBpC,IAAUE,MAGxB0D,2BACXC,aAAQ,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAP,MAAqB,CACzBzD,SAAUyD,EAAOzD,SACjB0D,YAAaD,EAAOC,YACpBC,eAAgBF,EAAOE,eACvBpC,gBAAiBkC,EAAOlC,gBACxBL,wBAAyBuC,EAAOvC,wBAChCO,+BAAgC+B,EAAG/B,+BACnCC,gBAAiB+B,EAAOG,yBACxBvD,0BAA2BoD,EAAOpD,0BAClCsB,sBAAuB6B,EAAG7B,sBAC1BC,WAAY6B,EAAO7B,WACnBC,cAAe4B,EAAO5B,cACtBC,wBAAyB0B,EAAG1B,2BAZhCyB,CAaIjC","file":"js/core.account-types-modal.6d3c938dd92006545654.js","sourcesContent":["import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport 'Sass/app/modules/account-types.scss';\n\nconst MainCard = ({ button_text, buttonOnClick, platforms, is_button_disabled, items, subtitle, title }) => {\n    return (\n        <div className='account-card__main'>\n            <h3 className='account-card__main-title'>{title}</h3>\n            <h4 className='account-card__main-subtitle'>{subtitle}</h4>\n            {Object.keys(items).length && (\n                <div className='account-card__main-table-container'>\n                    <table className='account-card__main-items'>\n                        <tbody>\n                            {Object.entries(items).map(([label, value], index) => {\n                                return (\n                                    <tr key={index} className='account-card__main-item'>\n                                        <td className='account-card__main-item-label'>{label}</td>\n                                        <td className='account-card__main-item-value'>{value}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            )}\n            {platforms && (\n                <div className='account-card__platforms'>\n                    <Text as='p' color='less-prominent' size='xxs' className='account-card__platforms-title'>\n                        {localize('Available on')}\n                    </Text>\n                    <div className='account-card__platforms-icons'>\n                        {platforms.map((platform, index) => {\n                            return (\n                                <div key={index} className='account-card__platforms-icon'>\n                                    <a href={platform.path} target='_blank' rel='noopener noreferrer'>\n                                        <Icon icon={platform.icon} size={24} />\n                                    </a>\n\n                                    <Text as='p' size='xxxs' className='account-card__platforms-name'>\n                                        {platform.name}\n                                    </Text>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            )}\n            <Button\n                className='account-card__main-button'\n                text={button_text}\n                is_disabled={is_button_disabled}\n                onClick={buttonOnClick}\n                has_effect\n                primary\n            />\n        </div>\n    );\n};\n\nconst AccountCard = ({ button_text, buttonOnClick, items, platforms, subtitle, title, is_button_disabled }) => {\n    return (\n        <div className='account-card'>\n            <div className={classNames('account-card__wrapper')}>\n                <MainCard\n                    items={items}\n                    subtitle={subtitle}\n                    title={title}\n                    is_button_disabled={is_button_disabled}\n                    platforms={platforms}\n                    button_text={button_text}\n                    buttonOnClick={buttonOnClick}\n                />\n            </div>\n        </div>\n    );\n};\n\nAccountCard.propTypes = {\n    button_text: PropTypes.string,\n    buttonOnClick: PropTypes.func,\n    items: PropTypes.object,\n    platforms: PropTypes.arrayOf(PropTypes.object),\n    subtitle: PropTypes.string,\n    title: PropTypes.string,\n};\n\nexport default AccountCard;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport {\n    MobileWrapper,\n    MobileCarousel,\n    DesktopWrapper,\n    Div100vhContainer,\n    Icon,\n    Modal,\n    ThemedScrollbars,\n    Text,\n} from '@deriv/components';\nimport { isDesktop, isMobile, routes, getStaticUrl, PlatformContext } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport AccountCard from './account-card.jsx';\n\nimport 'Sass/app/modules/account-types.scss';\n\nconst getTargetLoginid = (accounts, target_landing_company_shortcode) =>\n    Object.entries(accounts).reduce((acc, [loginid, { landing_company_shortcode }]) => {\n        if (landing_company_shortcode === target_landing_company_shortcode) {\n            // eslint-disable-next-line no-param-reassign\n            acc += loginid;\n        }\n        return acc;\n    }, '');\n\nconst Box = ({ title, description, footer_text, icons, cards }) => {\n    return (\n        <div className='account-types__box'>\n            <div className='account-types__box-left'>\n                <h2 className='account-types__box-title'>{title}</h2>\n                <Text as='p' size='xs' line_height='s' className='account-types__box-description'>\n                    {description}\n                </Text>\n                {footer_text && (\n                    <Text as='p' size='xxs' weight='bold' className='account-types__box-footer'>\n                        {footer_text}\n                    </Text>\n                )}\n                <div className='account-types__box-icons'>\n                    {icons.map((icon, index) => {\n                        return <Icon className='account-types__box-icon' icon={icon} key={index} />;\n                    })}\n                </div>\n            </div>\n            <MobileWrapper>\n                <MobileCarousel>{cards}</MobileCarousel>\n            </MobileWrapper>\n            <DesktopWrapper>{cards}</DesktopWrapper>\n        </div>\n    );\n};\n\nBox.propTypes = {\n    title: PropTypes.string,\n    description: PropTypes.string,\n    footer_text: PropTypes.string,\n    icons: PropTypes.arrayOf(PropTypes.string),\n    cards: PropTypes.array,\n};\n\nconst FinancialBox = ({ derivOnClick, is_deriv_crypto, mt5OnClick, has_maltainvest_account, add_account_label }) => {\n    return (\n        <Box\n            title={localize('Financial')}\n            description={localize(\n                'Trade commodities, cryptocurrencies, major and minor currency pairs with high leverage and variable spreads for maximum flexibility.'\n            )}\n            footer_text={localize('Over 50 tradable financial assets')}\n            icons={['IcUnderlyingFRXNZDJPY', 'IcUnderlyingOTC_NDX', 'IcUnderlyingFRXXAUUSD', 'IcUnderlyingFRXBROUSD']}\n            cards={[\n                <AccountCard\n                    key={0}\n                    title={localize('Trade Options')}\n                    subtitle={localize('with a Deriv Financial account')}\n                    button_text={has_maltainvest_account ? add_account_label[0] : add_account_label[1]}\n                    buttonOnClick={derivOnClick}\n                    items={{\n                        [localize('Multiplier')]: localize('Up to X1000'),\n                        [localize('Stop loss')]: localize('Flexible'),\n                        [localize('Take profit')]: localize('Flexible'),\n                        [localize('Cancel trade')]: localize('Allowed'),\n                        [localize('Currency')]: localize('USD/GBP/EUR'),\n                    }}\n                    platforms={[\n                        {\n                            icon: 'IcBrandDtrader',\n                            name: 'DTrader',\n                            path: getStaticUrl('/dtrader', { is_deriv_crypto }),\n                        },\n                        {\n                            icon: 'IcBrandDbot',\n                            name: 'DBot',\n                            path: getStaticUrl('/dbot', { is_deriv_crypto }),\n                        },\n                        {\n                            icon: 'IcBrandSmarttrader',\n                            name: 'SmartTrader',\n                            path: 'https://smarttrader.deriv.app/en/trading.html',\n                        },\n                    ]}\n                >\n                    <p className='account-card__description-text'>\n                        {localize(\n                            'Options are contracts that give the owner the right to buy or sell an asset at a fixed price for a specific period of time. That period could be as short as a day or as long as a couple of years, depending on the type of option contract.'\n                        )}\n                    </p>\n                    <p className='account-card__description-text--small'>{localize('Supported platform:')}</p>\n                    <p className='account-card__description-text--small'>{localize('DTrader and Dbot')}</p>\n                </AccountCard>,\n                <AccountCard\n                    key={1}\n                    title={localize('Trade on Margin')}\n                    subtitle={localize('with a DMT5 Financial account')}\n                    button_text={!has_maltainvest_account ? add_account_label[2] : add_account_label[0]}\n                    buttonOnClick={mt5OnClick}\n                    is_button_disabled={!has_maltainvest_account}\n                    items={{\n                        [localize('Leverage')]: localize('Up to 1:30'),\n                        [localize('Margin call')]: localize('100%'),\n                        [localize('Stop out level')]: localize('50%'),\n                        [localize('Currency')]: localize('EUR/GBP'),\n                    }}\n                    platforms={[\n                        {\n                            icon: 'IcBrandDMT5',\n                            name: 'MetaTrader 5',\n                            path: getStaticUrl('/dmt5', { is_deriv_crypto }),\n                        },\n                    ]}\n                >\n                    <p className='account-card__description-text'>\n                        {localize(\n                            'Margin trading is a method of trading assets using funds provided by Deriv.com. It allow you to access greater sums of capital to leverage your positions and realize larger profits on successful trades.'\n                        )}\n                    </p>\n                    <p className='account-card__description-text--small'>{localize('Supported platform:')} </p>\n                    <p className='account-card__description-text--small'>\n                        {localize('DMT5')} <br />\n                    </p>\n                </AccountCard>,\n            ]}\n        />\n    );\n};\n\nconst SyntheticBox = ({ derivOnClick, add_account_label, is_deriv_crypto }) => {\n    return (\n        <Box\n            title={localize('Synthetic')}\n            description={localize(\n                'Trade synthetic indices that are available 24/7, have constant volatility, and are free of market and liquidity risks.'\n            )}\n            icons={[\n                'IcUnderlying1HZ10V',\n                'IcUnderlying1HZ25V',\n                'IcUnderlying1HZ50V',\n                'IcUnderlying1HZ75V',\n                'IcUnderlying1HZ100V',\n                'IcUnderlyingR_10',\n                'IcUnderlyingR_25',\n                'IcUnderlyingR_50',\n                'IcUnderlyingR_75',\n                'IcUnderlyingR_100',\n                'IcUnderlyingBOOM1000',\n                'IcUnderlyingBOOM500',\n                'IcUnderlyingCRASH1000',\n                'IcUnderlyingCRASH500',\n                'IcUnderlyingSTPRNG',\n            ]}\n            cards={[\n                <AccountCard\n                    key={0}\n                    title={localize('Trade Options')}\n                    subtitle={localize('with a Deriv Synthetic account')}\n                    button_text={add_account_label}\n                    buttonOnClick={derivOnClick}\n                    items={{\n                        [localize('Trade type')]: localize('10+'),\n                        [localize('Min duration')]: localize('1 tick'),\n                        [localize('Max duration')]: localize('365 days'),\n                        [localize('Availability')]: localize('24/7'),\n                        [localize('Currency')]: localize('USD/GBP'),\n                    }}\n                    platforms={[\n                        {\n                            icon: 'IcBrandDtrader',\n                            name: 'DTrader',\n                            path: getStaticUrl('dtrader', { is_deriv_crypto }),\n                        },\n                        {\n                            icon: 'IcBrandDbot',\n                            name: 'DBot',\n                            path: getStaticUrl('dbot', { is_deriv_crypto }),\n                        },\n                        {\n                            icon: 'IcBrandSmarttrader',\n                            name: 'SmartTrader',\n                            path: 'https://smarttrader.deriv.app',\n                        },\n                    ]}\n                >\n                    <p className='account-card__description-text'>\n                        {localize(\n                            'Options are contracts that give the owner the right to buy or sell an asset at a fixed price for a specific period of time. That period could be as short as a day or as long as a couple of years, depending on the type of option contract.'\n                        )}\n                    </p>\n                    <p className='account-card__description-text--small'>{localize('Supported platform:')}</p>\n                    <p className='account-card__description-text--small'>{localize('DTrader and Dbot')}</p>\n                </AccountCard>,\n            ]}\n        />\n    );\n};\n\nconst AccountTypesModal = ({\n    accounts,\n    has_iom_account,\n    has_maltainvest_account,\n    history,\n    is_account_types_modal_visible,\n    is_dismissible,\n    landing_company_shortcode,\n    openRealAccountSignup,\n    standpoint,\n    switchAccount,\n    toggleAccountTypesModal,\n}) => {\n    const context_type = React.useContext(PlatformContext);\n\n    const closeModal = () => {\n        toggleAccountTypesModal(false);\n    };\n\n    const redirectToMt5 = account_type => {\n        closeModal();\n        history.push(`${routes.mt5}#${account_type}`);\n    };\n\n    const redirectToMt5Real = () => {\n        closeModal();\n        redirectToMt5('real');\n    };\n\n    const createRealAccount = target => {\n        closeModal();\n        openRealAccountSignup(target);\n    };\n\n    return (\n        <Modal\n            title={localize('Account types')}\n            width='904px'\n            className='account-types'\n            is_open={is_account_types_modal_visible}\n            toggleModal={closeModal}\n            has_close_icon={is_dismissible}\n        >\n            <ThemedScrollbars is_bypassed={isMobile()} autohide={false} height={'calc(100vh - 84px'}>\n                <Div100vhContainer height_offset='120px' is_disabled={isDesktop()} className='account-types__container'>\n                    <div className='account-types'>\n                        <Text as='p' size='xs' line_height='s' className='account-types__intro'>\n                            {localize('Choose an account that suits your needs.')}\n                        </Text>\n                        <div>\n                            <SyntheticBox\n                                derivOnClick={() => {\n                                    if (has_iom_account) {\n                                        if (landing_company_shortcode !== 'iom') {\n                                            switchAccount(getTargetLoginid(accounts, 'iom'));\n                                        }\n                                        closeModal();\n                                    } else {\n                                        createRealAccount(standpoint.gaming_company);\n                                    }\n                                }}\n                                add_account_label={\n                                    has_iom_account\n                                        ? localize('Trade with this account')\n                                        : localize('Add this real account')\n                                }\n                                is_deriv_crypto={context_type.is_deriv_crypto}\n                            />\n                            <FinancialBox\n                                derivOnClick={() => {\n                                    if (has_maltainvest_account) {\n                                        if (landing_company_shortcode !== 'maltainvest') {\n                                            switchAccount(getTargetLoginid(accounts, 'maltainvest'));\n                                        }\n                                        closeModal();\n                                    } else {\n                                        createRealAccount(standpoint.financial_company);\n                                    }\n                                }}\n                                mt5OnClick={redirectToMt5Real}\n                                has_maltainvest_account={has_maltainvest_account}\n                                add_account_label={[\n                                    localize('Trade with this account'),\n                                    localize('Add this real account'),\n                                    localize('Deriv Financial required'),\n                                ]}\n                                is_deriv_crypto={context_type.is_deriv_crypto}\n                            />\n                        </div>\n                    </div>\n                </Div100vhContainer>\n            </ThemedScrollbars>\n        </Modal>\n    );\n};\n\nAccountTypesModal.propTypes = {\n    accounts: PropTypes.object,\n    has_iom_account: PropTypes.bool,\n    has_maltainvest_account: PropTypes.bool,\n    history: PropTypes.any,\n    is_account_types_modal_visible: PropTypes.bool,\n    is_dismissible: PropTypes.bool,\n    landing_company_shortcode: PropTypes.string,\n    standpoint: PropTypes.object,\n    switchAccount: PropTypes.func,\n    toggleAccountTypesModal: PropTypes.func,\n};\n\nexport default withRouter(\n    connect(({ ui, client }) => ({\n        accounts: client.accounts,\n        can_upgrade: client.can_upgrade,\n        can_upgrade_to: client.can_upgrade_to,\n        has_iom_account: client.has_iom_account,\n        has_maltainvest_account: client.has_maltainvest_account,\n        is_account_types_modal_visible: ui.is_account_types_modal_visible,\n        is_dismissible: !client.should_have_real_account,\n        landing_company_shortcode: client.landing_company_shortcode,\n        openRealAccountSignup: ui.openRealAccountSignup,\n        standpoint: client.standpoint,\n        switchAccount: client.switchAccount,\n        toggleAccountTypesModal: ui.toggleAccountTypesModal,\n    }))(AccountTypesModal)\n);\n"],"sourceRoot":""}
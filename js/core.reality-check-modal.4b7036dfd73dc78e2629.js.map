{"version":3,"sources":["webpack:///./App/Containers/RealityCheckModal/brief-modal.jsx","webpack:///./App/Containers/RealityCheckModal/summary-modal.jsx","webpack:///./App/Containers/RealityCheckModal/reality-check-modal.jsx"],"names":["BriefModal","disableApp","enableApp","IntervalField","is_visible","logout","onSubmit","openStatement","validateForm","className","is_open","has_close_icon","title","localize","portalId","width","initialValues","interval","validate","errors","isSubmitting","isValid","values","touched","handleChange","handleBlur","noValidate","Body","max_autoheight_offset","is_disabled","isDesktop","as","size","line_height","i18n_default_text","components","key","onClick","align","Footer","has_separator","has_cancel","cancel_label","label","onCancel","propTypes","PropTypes","func","bool","Row","value","RowInfo","SummaryModal","openPositions","reality_check_duration","server_time","React","computed_values","setComputedValues","before_req","performance","now","WS","realityCheck","then","response","reality_check","time_taken","current_time","add","current_date_time_gmt","toGMTFormat","duration_string","getSessionDuration","start_time","unix","profit","sell_amount","buy_amount","start_date_time_gmt","turnover","session_duration","getDiffDuration","num_day","get","num_hour","num_minute","isEmptyObject","date_time","isMobile","height","autoHide","is_bypassed","loginid","currency","amount","buy_count","sell_count","potential_profit","type","secondary","large","open_contract_count","number","object","name","field","data-lpignore","onChange","onBlur","hint","required","error","autoComplete","maxLength","RealityCheckModal","logoutClient","reality_check_dismissed","setRealityCheckDuration","setReportsTabIndex","setVisibilityRealityCheck","history","useHistory","push","routes","statement","validNumber","min","max","is_ok","message","positions","connect","client","common","ui","is_reality_check_visible"],"mappings":"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","file":"js/core.reality-check-modal.4b7036dfd73dc78e2629.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport { Div100vhContainer, Modal, FormSubmitButton, Text } from '@deriv/components';\nimport { isDesktop } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\n\nconst BriefModal = ({\n    disableApp,\n    enableApp,\n    IntervalField,\n    is_visible,\n    logout,\n    onSubmit,\n    openStatement,\n    validateForm,\n}) => {\n    return (\n        <Modal\n            className='reality-check'\n            enableApp={enableApp}\n            is_open={is_visible}\n            disableApp={disableApp}\n            has_close_icon={false}\n            title={localize('Trading statistics report')}\n            portalId='modal_root_absolute'\n            width='720px'\n        >\n            <Formik\n                initialValues={{\n                    interval: '',\n                }}\n                validate={validateForm}\n                onSubmit={onSubmit}\n            >\n                {({ errors, isSubmitting, isValid, values, touched, handleChange, handleBlur }) => (\n                    <Form noValidate>\n                        <Modal.Body>\n                            <Div100vhContainer\n                                className='reality-check__wrapper'\n                                max_autoheight_offset='204px'\n                                is_disabled={isDesktop()}\n                            >\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    line_height='m'\n                                    className='reality-check__text reality-check__text--description'\n                                >\n                                    <Localize i18n_default_text='Options trading can become a real addiction, as can any other activity pushed to its limits. To avoid the danger of such an addiction, we provide a reality-check that gives you a summary of your trades and accounts on a regular basis.' />\n                                </Text>\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    line_height='m'\n                                    className='reality-check__text reality-check__text--description'\n                                >\n                                    <Localize\n                                        i18n_default_text='Would like to check your statement first? <0>Check Statement</0>'\n                                        components={[<a key={0} className='link' onClick={openStatement} />]}\n                                    />\n                                </Text>\n\n                                <div className='reality-check__separator reality-check__separator--large' />\n\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    line_height='m'\n                                    align='center'\n                                    className='reality-check__text reality-check__text--center'\n                                >\n                                    <Localize i18n_default_text='Please specify your preferred interval reality check in minutes:' />\n                                </Text>\n\n                                <IntervalField\n                                    values={values}\n                                    touched={touched}\n                                    errors={errors}\n                                    handleChange={handleChange}\n                                    handleBlur={handleBlur}\n                                />\n                            </Div100vhContainer>\n                        </Modal.Body>\n                        <Modal.Footer has_separator>\n                            <FormSubmitButton\n                                className='reality-check__submit'\n                                has_cancel\n                                cancel_label={localize('Log out')}\n                                is_disabled={!values.interval || !isValid || isSubmitting}\n                                label={localize('Continue trading')}\n                                onCancel={logout}\n                            />\n                        </Modal.Footer>\n                    </Form>\n                )}\n            </Formik>\n        </Modal>\n    );\n};\n\nBriefModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    IntervalField: PropTypes.func,\n    is_visible: PropTypes.bool,\n    logout: PropTypes.func,\n    onSubmit: PropTypes.func,\n    openStatement: PropTypes.func,\n    validateForm: PropTypes.func,\n};\n\nexport default BriefModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport {\n    Modal,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Loading,\n    ThemedScrollbars,\n    Money,\n    Button,\n    FormSubmitButton,\n    Text,\n} from '@deriv/components';\nimport { isDesktop, isEmptyObject, getDiffDuration, toGMTFormat, isMobile } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { WS } from 'Services';\n\nconst Row = ({ label, value }) => (\n    <div className='reality-check__row'>\n        <span>{label}</span>\n        <strong>{value}</strong>\n    </div>\n);\n\nconst RowInfo = ({ label, value }) => (\n    <Text as='p' size='xs' className='reality-check__text'>\n        <span>{label}</span>\n        <br />\n        <strong>{value}</strong>\n    </Text>\n);\n\nconst SummaryModal = ({\n    disableApp,\n    enableApp,\n    IntervalField,\n    is_visible,\n    logout,\n    onSubmit,\n    openPositions,\n    openStatement,\n    reality_check_duration,\n    server_time,\n    validateForm,\n}) => {\n    const [computed_values, setComputedValues] = React.useState({});\n\n    React.useEffect(() => {\n        const before_req = performance.now();\n\n        WS.realityCheck().then(response => {\n            const reality_check = response.reality_check;\n            if (!reality_check) return;\n\n            const after_req = performance.now();\n            const time_taken = after_req - before_req;\n            const current_time = server_time.add(time_taken, 'milliseconds');\n\n            setComputedValues({\n                current_date_time_gmt: toGMTFormat(current_time),\n                duration_string: getSessionDuration(reality_check.start_time, current_time.unix()),\n                profit: reality_check.sell_amount - reality_check.buy_amount,\n                start_date_time_gmt: toGMTFormat(+reality_check.start_time * 1000),\n                turnover: reality_check.sell_amount + reality_check.buy_amount,\n                ...reality_check,\n            });\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const getSessionDuration = (start_time, current_time) => {\n        const session_duration = getDiffDuration(start_time, current_time);\n\n        return localize('{{num_day}} days {{num_hour}} hours {{num_minute}} minutes', {\n            num_day: session_duration.get('days'),\n            num_hour: session_duration.get('hours'),\n            num_minute: session_duration.get('minutes'),\n        });\n    };\n\n    if (isEmptyObject(computed_values)) {\n        return <Loading />;\n    }\n\n    return (\n        <Modal\n            className='reality-check'\n            enableApp={enableApp}\n            is_open={is_visible}\n            disableApp={disableApp}\n            portalId='modal_root_absolute'\n            has_close_icon={false}\n            title={\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Localize\n                            i18n_default_text='Your trading statistics since: {{date_time}}'\n                            values={{ date_time: computed_values.start_date_time_gmt }}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <Localize i18n_default_text='Your trading statistics since:' />\n                        <br />\n                        {computed_values.start_date_time_gmt}\n                    </MobileWrapper>\n                </React.Fragment>\n            }\n            width={isMobile() ? '304px' : '720px'}\n        >\n            <Formik\n                initialValues={{\n                    interval: reality_check_duration,\n                }}\n                validate={validateForm}\n                onSubmit={onSubmit}\n            >\n                {({ errors, isSubmitting, isValid, values, touched, handleChange, handleBlur }) => (\n                    <Form noValidate>\n                        <Modal.Body>\n                            <ThemedScrollbars height='75vh' autoHide={false} is_bypassed={isMobile()}>\n                                <Div100vhContainer\n                                    className='reality-check__column-wrapper'\n                                    is_disabled={isDesktop()}\n                                    max_autoheight_offset='204px'\n                                >\n                                    <div className='reality-check__column'>\n                                        <div className='reality-check__column-content'>\n                                            <Row label={localize('Login ID')} value={computed_values.loginid} />\n                                            <Row label={localize('Currency')} value={computed_values.currency} />\n                                            <Row\n                                                label={localize('Turnover')}\n                                                value={\n                                                    <Money\n                                                        amount={computed_values.turnover}\n                                                        currency={computed_values.currency}\n                                                    />\n                                                }\n                                            />\n                                            <Row\n                                                label={localize('Profit / Loss')}\n                                                value={\n                                                    <React.Fragment>\n                                                        {!!computed_values.profit &&\n                                                            (computed_values.profit < 0 ? '-' : '+')}\n                                                        <Money\n                                                            amount={computed_values.profit}\n                                                            currency={computed_values.currency}\n                                                        />\n                                                    </React.Fragment>\n                                                }\n                                            />\n                                            <Row\n                                                label={localize('Contract bought')}\n                                                value={computed_values.buy_count}\n                                            />\n                                            <Row label={localize('Contract sold')} value={computed_values.sell_count} />\n                                            <Row\n                                                label={localize('Potential profit')}\n                                                value={\n                                                    <Money\n                                                        amount={computed_values.potential_profit}\n                                                        currency={computed_values.currency}\n                                                    />\n                                                }\n                                            />\n                                        </div>\n                                        <Button\n                                            type='button'\n                                            secondary\n                                            large\n                                            onClick={\n                                                computed_values.open_contract_count ? openPositions : openStatement\n                                            }\n                                            className='reality-check__button reality-check__button--full-width'\n                                        >\n                                            {localize('Go to Reports')}\n                                        </Button>\n                                    </div>\n\n                                    <MobileWrapper>\n                                        <div className='reality-check__separator' />\n                                    </MobileWrapper>\n\n                                    <div className='reality-check__column'>\n                                        <RowInfo\n                                            label={localize('Session duration:')}\n                                            value={computed_values.duration_string}\n                                        />\n                                        <RowInfo\n                                            label={localize('Login time:')}\n                                            value={computed_values.start_date_time_gmt}\n                                        />\n                                        <RowInfo\n                                            label={localize('Current time:')}\n                                            value={computed_values.current_date_time_gmt}\n                                        />\n\n                                        <DesktopWrapper>\n                                            <div className='reality-check__separator' />\n                                        </DesktopWrapper>\n\n                                        <Text\n                                            as='p'\n                                            size='xs'\n                                            line_height='m'\n                                            align='center'\n                                            className='reality-check__text reality-check__text--center'\n                                        >\n                                            <Localize i18n_default_text='Your preferred time interval between each report:' />\n                                        </Text>\n\n                                        <IntervalField\n                                            values={values}\n                                            touched={touched}\n                                            errors={errors}\n                                            handleChange={handleChange}\n                                            handleBlur={handleBlur}\n                                        />\n                                    </div>\n                                </Div100vhContainer>\n                            </ThemedScrollbars>\n                        </Modal.Body>\n                        <Modal.Footer has_separator>\n                            <FormSubmitButton\n                                className='reality-check__submit'\n                                has_cancel\n                                cancel_label={localize('Log out')}\n                                is_disabled={!values.interval || !isValid || isSubmitting}\n                                label={localize('Continue trading')}\n                                onCancel={logout}\n                            />\n                        </Modal.Footer>\n                    </Form>\n                )}\n            </Formik>\n        </Modal>\n    );\n};\n\nSummaryModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    IntervalField: PropTypes.func,\n    is_visible: PropTypes.bool,\n    logout: PropTypes.func,\n    onSubmit: PropTypes.func,\n    openPositions: PropTypes.func,\n    openStatement: PropTypes.func,\n    reality_check_duration: PropTypes.number,\n    server_time: PropTypes.object,\n    validateForm: PropTypes.func,\n};\n\nexport default SummaryModal;\n","import { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Input } from '@deriv/components';\nimport { routes, validNumber } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport BriefModal from './brief-modal.jsx';\nimport SummaryModal from './summary-modal.jsx';\n\nconst IntervalField = ({ values, touched, errors, handleChange, handleBlur }) => (\n    <div className='reality-check__fieldset'>\n        <Field name='interval'>\n            {({ field }) => (\n                <Input\n                    {...field}\n                    data-lpignore='true'\n                    type='text'\n                    label={localize('Time interval')}\n                    value={values.interval}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    hint={localize('Interval should be between 10-60 minutes')}\n                    required\n                    error={touched.interval && errors.interval}\n                    autoComplete='off'\n                    maxLength='2'\n                />\n            )}\n        </Field>\n    </div>\n);\n\nconst RealityCheckModal = ({\n    disableApp,\n    enableApp,\n    logoutClient,\n    is_visible,\n    reality_check_dismissed,\n    reality_check_duration,\n    server_time,\n    setRealityCheckDuration,\n    setReportsTabIndex,\n    setVisibilityRealityCheck,\n}) => {\n    const history = useHistory();\n\n    const openPositions = () => {\n        // index of open positions in reports' side menu is 0\n        setReportsTabIndex(0);\n        history.push(routes.positions);\n        setVisibilityRealityCheck(0);\n    };\n\n    const openStatement = () => {\n        // index of statement in reports' side menu is 2\n        setReportsTabIndex(2);\n        history.push(routes.statement);\n        setVisibilityRealityCheck(0);\n    };\n\n    const validateForm = values => {\n        const error = {};\n\n        if (!values.interval) {\n            error.interval = localize('This field is required.');\n        } else {\n            const { is_ok, message } = validNumber(values.interval, { type: 'number', min: 10, max: 60 });\n            if (!is_ok) error.interval = message;\n        }\n\n        return error;\n    };\n\n    const onSubmit = values => {\n        setVisibilityRealityCheck(0);\n        setRealityCheckDuration(values.interval);\n    };\n\n    // if user has seen the brief once and set\n    // the initial reality check interval\n    // we can show the summary from now on\n    if (!reality_check_dismissed && reality_check_duration) {\n        return (\n            <SummaryModal\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_visible={is_visible}\n                openPositions={openPositions}\n                openStatement={openStatement}\n                validateForm={validateForm}\n                onSubmit={onSubmit}\n                logout={logoutClient}\n                reality_check_duration={reality_check_duration}\n                server_time={server_time}\n                IntervalField={IntervalField}\n            />\n        );\n    }\n\n    return (\n        <BriefModal\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_visible={is_visible}\n            openStatement={openStatement}\n            validateForm={validateForm}\n            onSubmit={onSubmit}\n            logout={logoutClient}\n            IntervalField={IntervalField}\n        />\n    );\n};\n\nRealityCheckModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    history: PropTypes.object,\n    logoutClient: PropTypes.func,\n    is_visible: PropTypes.bool,\n    reality_check_dismissed: PropTypes.bool,\n    reality_check_duration: PropTypes.number,\n    setRealityCheckDuration: PropTypes.func,\n    setReportsTabIndex: PropTypes.func,\n    setVisibilityRealityCheck: PropTypes.func,\n};\n\nexport default connect(({ client, common, ui }) => ({\n    logoutClient: client.logout,\n    is_visible: client.is_reality_check_visible,\n    reality_check_dismissed: client.reality_check_dismissed,\n    reality_check_duration: client.reality_check_duration,\n    setRealityCheckDuration: client.setRealityCheckDuration,\n    setVisibilityRealityCheck: client.setVisibilityRealityCheck,\n    server_time: common.server_time,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    setReportsTabIndex: ui.setReportsTabIndex,\n}))(RealityCheckModal);\n"],"sourceRoot":""}